[
  {
    "objectID": "qss-code-authors.html",
    "href": "qss-code-authors.html",
    "title": "Code Contribution and Scientific Authorship",
    "section": "",
    "text": "Software has become integral to contemporary scientific research (Edwards et al. 2013; Mayernik et al. 2017). From analysis scripts to infrastructure for data collection (Hasselbring et al. 2024), specialized tools are now essential components of modern research practices. Today, research software serves multiple critical functions: enabling reproducible experiments (Krafczyk et al. 2019; Trisovic et al. 2021), providing methodological documentation (Ram 2013), and increasingly appearing alongside publications as a research artifact (Cao et al. 2023; Trujillo, Hébert-Dufresne, and Bagrow 2022). Software’s expanding role has changed how science is conducted, with many fields now depending on specialized tools to advance knowledge.\nDespite the growing dependence on software, a significant recognition gap exists between software development and traditional scientific outputs. Software contributors frequently find their work relegated to acknowledgments sections rather than warranting authorship (Philippe et al. 2019), creating a disconnect between the value software provides and the credit its developers receive. This misalignment has consequences for scientific careers, as the lack of formal credit can significantly impact promotion and advancement within research organizations (Carver et al. 2022; Biagioli and Galison 2014). The result is a system that increasingly relies on software while undervaluing those who create it, potentially discouraging talented developers from pursuing scientific careers and affecting the sustainability of research software development (Muna et al. 2016).\nThe scientific community has attempted to address this recognition gap through various initiatives. The Contributor Roles Taxonomy (CRediT) has expanded authorship criteria to include specialized contribution roles (Brand et al. 2015), while researchers have used similar taxonomies to investigate labor distribution within teams, including specialist and generalist roles (Larivière, Pontille, and Sugimoto 2020; Larivière et al. 2016; Sauermann and Haeussler 2017; Li, Zhang, and Larivière 2023; Lu et al. 2019). Despite these efforts, limitations persist. Current frameworks remain centered on traditional author lists, perpetuating historical biases and relying heavily on self-reporting without external verification (Haeussler and Sauermann 2013; Gøtzsche et al. 2007; Ni et al. 2021). The scientific community continues to work on developing appropriate systems for software citation and credit attribution that adequately reflect these contributions (Merow et al. 2023; Westner et al. 2024; Katz et al. 2020).\nThe emergence of public code repositories alongside published research presents an opportunity to address this problem. Source code repositories typically employ version control systems that maintain records of who contributes what code and when, providing a window into the patterns of software development in scientific research. Using the transaction histories from source code repositories, we developed a predictive model that enables systematic matching between scientific article authors and source code developer accounts - creating a dataset that connects formal authorship with code contributions across a corpus of scientific work.\nBy applying our predictive model across 138596 paired research articles and repositories, we identify several patterns in the relationship between code contributions and scientific recognition. Our analysis reveals that nearly 30% of articles have non-author code-contributors - individuals who helped create the software but received no formal authorship credit. We find that code-contributing authors are associated with modest increases in article-level impact metrics (~5.2% increase in citations per code-contributing author), though these effects become statistically non-significant when controlling for domain, article type, and open access status. First authors emerge as significantly more likely to be code contributors compared to other positions across all conditions tested. We also document a negative relationship between coding frequency and scholarly impact: authors who contribute code more frequently show progressively lower h-indices compared to their non-coding peers, a pattern that persists when controlling for publication count, and author’s most common author position, domain, and article type.\nThe primary contributions of this article are: (1) a predictive model for matching authors with developer account information that addresses challenges in identity resolution across platforms; (2) a dataset of linked authors and developers for 138596 article-repository pairs, providing a resource for analyzing scientific software development patterns; and (3) preliminary analyses that reveal insights into the software development dynamics of research teams, including patterns of recognition, impact, and career implications for code contributors. These contributions provide evidence for the ongoing discussions about scientific recognition systems and raise questions about aligning institutional incentives with the spectrum of contributions that drive modern scientific progress.\nThe remainder of this paper proceeds as follows. We first provide relevant background on scientific software development and recognition, introducing the specific hypotheses that guide our investigation. Next, we detail our data and methods, describing how we created a dataset of linked article-repository pairs, trained and evaluated our predictive model for entity matching, and applied our model across each article-repository pair. We then present our preliminary analysis of the data, focusing first on article/team-level dynamics before moving to individual-level patterns, formally accepting or rejecting each hypothesis based on our findings. We conclude with a discussion of the results, limitations of our work, and areas for future improvement."
  },
  {
    "objectID": "qss-code-authors.html#research-team-composition-and-scientific-impact",
    "href": "qss-code-authors.html#research-team-composition-and-scientific-impact",
    "title": "Code Contribution and Scientific Authorship",
    "section": "2.1 Research Team Composition and Scientific Impact",
    "text": "2.1 Research Team Composition and Scientific Impact\nScientific recognition systems have, except for foundational methodological shifts, favored experimental and theoretical contributions more than their methodological counterparts, with experimental and theoretical articles receiving higher citation rates (Aksnes 2006; Liu, Zhang, and Li 2023; Chen et al. 2024). However, the growing importance of computational methods in science has transformed how research is conducted across all types of scientific work. Modern scientific endeavors increasingly depend on sophisticated computational approaches, whether for processing large-scale experimental data, running complex simulations, or developing new methodological tools (Jin et al. 2015; Hampton et al. 2013; Edwards et al. 2013; Mayernik et al. 2017; Hasselbring et al. 2024).\nThe computational evolution in scientific practice intersects with established findings about team dynamics in both research and software development. Prior research has shown that larger and more diverse teams typically produce higher-impact scientific work (Franceschet and Costantini 2010; Larivière et al. 2014), while in software engineering, larger development teams tend to create more reliable software with fewer defects (Wyss, De Carli, and Davidson 2023). These parallel findings suggest that team size may be particularly important in scientific software development, where both technical robustness and scientific innovation are crucial.\nThe unique characteristics of scientific software development - including the implementation of novel algorithms, requirements for deep domain knowledge, and an increased emphasis on reproducibility (Muna et al. 2016; Howison and Herbsleb 2013) - make team composition especially relevant. Larger development teams may enhance scientific impact through multiple mechanisms: they can produce more robust and generalizable software tools for methodological contributions, while also enabling more sophisticated computational analyses and larger-scale data processing for experimental work. Given these patterns in team dynamics, software development practices, and the computational transformation of scientific work, we propose:\nH1: The number of code contributors to a research article will be positively associated with the article’s citation count."
  },
  {
    "objectID": "qss-code-authors.html#author-roles-and-technical-contributions",
    "href": "qss-code-authors.html#author-roles-and-technical-contributions",
    "title": "Code Contribution and Scientific Authorship",
    "section": "2.2 Author Roles and Technical Contributions",
    "text": "2.2 Author Roles and Technical Contributions\nAuthor positions in scientific publications signal specific roles and responsibilities, a relationship extensively studied through contribution role taxonomies like CRediT (Larivière et al. 2016). These studies reveal that first authors and corresponding authors, while occasionally the same individual (Chinchilla-Rodrı́guez et al. 2022), take on distinct sets of responsibilities. Analyses of contribution patterns consistently show that software development, data analysis, and visualization tasks typically fall to first authors (Larivière et al. 2016; Júnior et al. 2016; Larivière, Pontille, and Sugimoto 2020; Sauermann and Haeussler 2017). Meanwhile, corresponding authors, whether or not they are also first authors, often maintain responsibility for research artifacts’ long-term sustainability and reuse, which we believe may include the maintenance and documentation of software tools.\nSource code repository contribution records provide a unique method to verify these established patterns of contribution. Given prior findings about the distribution of technical responsibilities within research teams, we expect these repository records to reflect similar patterns of engagement with software development:\nH2a: First authors have higher rates of code contribution compared to authors in other positions.\nH2b: Corresponding authors have higher rates of code contribution compared to non-corresponding authors."
  },
  {
    "objectID": "qss-code-authors.html#code-contribution-and-individual-scientific-impact",
    "href": "qss-code-authors.html#code-contribution-and-individual-scientific-impact",
    "title": "Code Contribution and Scientific Authorship",
    "section": "2.3 Code Contribution and Individual Scientific Impact",
    "text": "2.3 Code Contribution and Individual Scientific Impact\nDespite the increasingly central role of software in science, researchers who develop scientific software face persistent challenges in receiving formal scientific recognition for their contributions. Prior work has shown that software developers in research settings are often relegated to acknowledgment sections rather than receiving authorship credit, even when their technical contributions are fundamental to the research (Carver et al. 2022; Philippe et al. 2019).\nThe challenge of recognition is compounded by inconsistent practices in software citation. While efforts have been made to standardize software citation, actual citation practices remain highly variable across fields and journals (Lamprecht et al. 2020; Katz et al. 2020; Smith, Katz, and Niemeyer 2016). This variability creates particular challenges for researchers who maintain and update existing software packages. While creating entirely new software may lead to dedicated publications and citations, the ongoing work of maintaining, debugging, and extending existing software - often crucial for scientific progress - typically generates less visible scientific credit (Howison and Herbsleb 2011, 2013).\nThese structural challenges in how software contributions are recognized and cited suggest a potential misalignment between technical contributions and traditional scientific impact metrics. When researchers dedicate significant time to software development and maintenance, their contributions may not be fully captured by conventional bibliometric measures, regardless of the software’s importance to the field. Whether through attribution practices that favor acknowledgments over authorship, or citation patterns that undervalue maintenance work, multiple mechanisms could lead to lower traditional impact metrics for active code contributors. Based on these patterns in software recognition and citation, we hypothesize:\nH3: The frequency of a researcher’s code contributions will be negatively associated with their h-index."
  },
  {
    "objectID": "qss-code-authors.html#linking-scientific-articles-and-source-code-repositories",
    "href": "qss-code-authors.html#linking-scientific-articles-and-source-code-repositories",
    "title": "Code Contribution and Scientific Authorship",
    "section": "3.1 Linking Scientific Articles and Source Code Repositories",
    "text": "3.1 Linking Scientific Articles and Source Code Repositories\nModern scientific research increasingly requires the public sharing of research code, creating unique opportunities to study the relationship between scientific authorship and software development. Many journals and platforms now require or recommend code and data sharing (Stodden, Guo, and Ma 2013; Sharma et al. 2024), creating traceable links between publications and code that enable systematic study of both article-repository and author-developer relationships (Hata et al. 2021; Kelley and Garijo 2021; Stankovski and Garijo 2024; Milewicz, Pinto, and Rodeghero 2019).\nOur data collection process leverages multiple sources of linked scientific articles and code repositories to ensure broad coverage of multiple different domains and article types. Our dataset combines article-source-code-repository pairs from:\n\nPLOS: Traditional research articles\nJOSS and SoftwareX: Specialized software-focused publications\nPapers with Code (ArXiv): preprints\n\nTo reduce the complexity of dataset processing and enrichment, we filter out any article-source-code-repository pairs which store code somewhere other than GitHub. While this decision prioritizes processing simplicity, we acknowledge that while GitHub is the predominate host of scientific software (Cao et al. 2023; Escamilla et al. 2022), it is also stored and shared on other platforms, which should be investigated as a part of future research (Trujillo, Hébert-Dufresne, and Bagrow 2022).\nThrough integration of multiple data sources, we extract detailed information about both the scientific and software development aspects of each project. We utilize the Semantic Scholar API for DOI resolution to ensure that we find the latest version of each article, which is particularly important for working with preprints as they may have been published in a journal since their inclusion in the Papers with Code dataset. We then utilize the OpenAlex API to gather publication metadata (open access status, domain, publication date), author details (name, author position, corresponding author status), and article- and individual-level metrics (citation counts, FWCI, h-index). The GitHub API provides similar information for source code repositories, including repository metadata (name, description, languages, creation date), contributor details (username, name, email), and repository-level metrics (star count, fork count, issue count).\nSemantic Scholar DOI Resolution Statistics:\n\nOverall DOI resolution rate: 56.3%\nPLOS DOI resolution rate: 2.1%\nJOSS DOI resolution rate: 4.0%\nSoftwareX DOI resolution rate: 0.0%\nPapers with Code DOI resolution rate: 49.2%\n\nTaken together, we form one of the largest and most comprehensively annotated collections of paired scientific articles and associated source-code repositories. In total, we collect and enrich data for 163292 article-repository pairs."
  },
  {
    "objectID": "qss-code-authors.html#a-predictive-model-for-matching-article-authors-and-source-code-contributors",
    "href": "qss-code-authors.html#a-predictive-model-for-matching-article-authors-and-source-code-contributors",
    "title": "Code Contribution and Scientific Authorship",
    "section": "3.2 A Predictive Model for Matching Article Authors and Source Code Contributors",
    "text": "3.2 A Predictive Model for Matching Article Authors and Source Code Contributors\n\n3.2.1 Annotated Dataset Creation\nThe development of an accurate author-developer matching model requires high-quality labeled training data that captures the complexity of real-world identity matching. Entity matching between authors and developers is non-trivial due to multiple forms of name variation and incomplete information. These variations can include differences in formatting (e.g., “J. Doe” vs “Jane Doe”), institutional versus personal email addresses, and incomplete or outdated information.\nWe developed an annotation process to create a robust training dataset while maximizing efficiency and accuracy. We focused our annotation efforts on JOSS articles to increase positive match density, as these software-focused publications typically have higher overlap between authors and developers. For each JOSS author, we generated three random pairings with developer accounts from the article’s associated repository. From the full set of generated pairs, we randomly sampled 3,000 for annotation which two independent annotators then labeled as either a match or non-match. After completing all annotations, we systematically resolved any disagreements between the annotators through discussion and additional verification.\nThe resulting annotated dataset provides a comprehensive foundation for training our predictive model while highlighting common patterns in author-developer identity matching. After resolving all annotated pairs, our final dataset contains:\n\nMatch Distribution:\n\n451 (15.0%) positive matches\n2548 (85.0%) negative matches\n\nUnique Individuals:\n\n2027 unique authors\n2733 unique developer accounts\n\nDeveloper Profile Completeness:\n\n2191 (80.2%) accounts have associated names\n839 (30.7%) accounts have associated emails\n\n\n\n\n3.2.2 Training and Evaluation\nOur training and evaluation methodology begins with careful dataset preparation to prevent data leakage between training and test sets. To ensure complete separation of both authors and developers, we randomly selected 10% of unique authors and 10% of unique developers, designating any pairs containing these selected entities for the test set. Due to the combinatorial nature of our author-developer pairs, this entity-based splitting strategy resulted in 2442 (81.4%) pairs for training and 557 (18.6%) pairs for testing.\nFor our predictive model, we evaluate three transformer-based architectures that have demonstrated strong performance in entity matching tasks: DeBERTa-v3-base (He, Gao, and Chen 2021; He et al. 2021), mBERT (bert-base-multilingual-cased) (Devlin et al. 2018), and DistilBERT (Sanh et al. 2019). While BERT-based architectures have been widely studied, they continue to achieve state-of-the-art results across various natural language processing tasks, particularly in scenarios requiring precise entity matching and relationship identification (Tran et al. 2024; Yu et al. 2024; Jeong and Kim 2022).\nWe conducted systematic evaluation of these base models across different combinations of developer-account features, ranging from using only the username to incorporating full profile information (username, display name, and email address). All models were fine-tuned using the Adam optimizer with a learning rate of 1e-05, batch sizes of 8 for both training and evaluation, and a linear learning rate scheduler. Given the size of our dataset and the binary nature of our classification task, models were trained for a single epoch to prevent overfitting.\nModel performance was assessed using standard binary classification metrics, with particular emphasis on the F1 score for positive (matching) pairs due to the inherent class imbalance in author-developer matching. This evaluation framework allows us to directly compare model architectures and feature combinations while accounting for both precision and recall in identifying correct matches.\nOur comprehensive model evaluation revealed that fine-tuning DeBERTa-v3-base (He, Gao, and Chen 2021) with developer username and display name as input features produces optimal performance for author-developer matching. This model configuration achieves a binary F1 score of 0.944, with accuracy of 0.984, precision of 0.938, and recall of 0.95. A complete comparison of model architectures and feature combinations can be found in Table 3.\nAnalysis of each model’s performance revealed that including developer display names has the largest positive impact on model performance compared to username alone. While this effect might be partially attributed to the higher availability of display names in our dataset compared to email addresses, the performance improvement is notable. We additionally observe that mBERT’s performance was comparable with DeBERTa’s while additionally using the developer email address as an additional input feature, but selected the DeBERTa configuration for its relative simplicity and more recent and comprehensive pretraining. DeBERTa’s consistent strong performance across various feature combinations, combined with its more extensive pretraining dataset, suggests better generalization potential for future applications.\nTo facilitate the reuse of our work, we have made our trained model and supporting code publicly available. Complete fine-tuning, evaluation, and inference code is available as the Python package: sci-soft-models, and the fine-tuned model has been deployed to HuggingFace (evamxb/dev-author-em-clf)."
  },
  {
    "objectID": "qss-code-authors.html#linking-authors-and-github-developer-accounts",
    "href": "qss-code-authors.html#linking-authors-and-github-developer-accounts",
    "title": "Code Contribution and Scientific Authorship",
    "section": "3.3 Linking Authors and GitHub Developer Accounts",
    "text": "3.3 Linking Authors and GitHub Developer Accounts\nOur trained entity-matching model enables comprehensive identification of author-developer relationships across all possible author and developer-account combinations within each article-repository pair. This broad application accounts for the complex realities of scientific software development practices, particularly the common occurrence of researchers maintaining multiple developer accounts across different projects or institutions, and account transitions as researchers move between roles.\nWhile our model demonstrates strong performance, we acknowledge certain limitations in our approach. Notably, the model’s performance can be affected by shorter names (both usernames and display names) where less textual information is available for matching. Additionally, while organization accounts (such as research lab accounts used for project management) present a potential challenge for accurate matching, our filtering mechanisms applied before analysis help minimize their impact in modeling.\nThe resulting dataset represents, to our knowledge, the first large-scale collection of linked article-repository and author-developer-account pairs, particularly in the physical sciences. Specifically, our dataset contains 138596 article-repository pairs, with 295806 distinct authors and 152170 distinct developer accounts. From these distinct entities, we identify 108754 annotated author-developer pairs. A detailed breakdown of these counts by data source, domain, document type, and open access status is available in Table 1.\n\n\n\n\nTable 1: Counts of Article-Repository Pairs, Authors, and Developers by Data Sources, Domains, Document Types, and Access Status.\n\n\n\n\n\n\nCategory\nSubset\nArticle-Repository Pairs\nAuthors\nDevelopers\n\n\nBy Domain\nPhysical Sciences\n116597\n240536\n130601\n\n\nSocial Sciences\n8839\n29239\n14023\n\n\nLife Sciences\n7727\n31613\n12123\n\n\nHealth Sciences\n5176\n26022\n7277\n\n\nBy Document Type\npreprint\n72177\n170301\n87311\n\n\nresearch article\n63528\n173183\n78935\n\n\nsoftware article\n2891\n9294\n12868\n\n\nBy Access Status\nOpen\n132856\n286874\n147831\n\n\nClosed\n5740\n23668\n9352\n\n\nBy Data Source\npwc\n129615\n262889\n134926\n\n\nplos\n6090\n30233\n8784\n\n\njoss\n2336\n7105\n11362\n\n\nsoftwarex\n555\n2244\n1628\n\n\nTotal\n\n138596\n295806\n152170"
  },
  {
    "objectID": "qss-code-authors.html#software-development-dynamics-within-research-teams",
    "href": "qss-code-authors.html#software-development-dynamics-within-research-teams",
    "title": "Code Contribution and Scientific Authorship",
    "section": "4.1 Software Development Dynamics Within Research Teams",
    "text": "4.1 Software Development Dynamics Within Research Teams\nUnderstanding the composition and dynamics of software development teams provides essential context for analyzing how code contributions relate to scientific recognition and impact. To ensure reliable analysis, we focus on a subset of our data that includes only article-repository pairs with at least one article citation, repository commit activity that at the latest falls within 90 days of publication, and research teams of typical size (removing those with fewer than 3 authors and less than 12 authors, the 97th percentile for research team size). In addition, we filter out any author-developer pairs which have a predictive model confidence of less than 0.97.\nWithin this filtered dataset, we categorized individuals into three groups: code-contributing authors (CC-A) who both authored papers and contributed code to associated repositories, non-code-contributing authors (NCC-A) who authored papers but showed no evidence of code contributions, and code-contributing non-authors (CC-NA) who contributed code but received no authorship recognition. This categorization revealed that papers in our dataset typically have 4.9 ± 1.9 total authors, with 1.0 ± 0.7 code-contributing authors and 3.9 ± 2.0 non-code-contributing authors. Beyond the author list, papers averaged 0.5 ± 1.7 code-contributing non-authors. Table 2 provides a detailed breakdown of these distributions by domain, article type, and open access status.\nPerhaps most striking is our finding that 6586 papers (28.9%) have at least one code contributor who did not receive authorship recognition. Within this substantial subset of papers, we found an average of 1.6 ± 2.9 unrecognized code contributors per paper. The presence of only one code-contributing author per paper, on average, aligns with previous research by Larivière, Pontille, and Sugimoto (2020) showing that technical tasks like data curation, formal analysis, visualization, and software development typically fall to first authors. However, our finding that over a quarter of papers have unrecognized code contributors suggests a more complex dynamic between software development and authorship recognition.\n\n\n\n\nTable 2: Mean and Standard Deviation of Non-Code-Contributing Authors (NCC-A), Code-Contributing Authors (CC-A), and Code-Contributing Non-Authors (CC-NA) Research Team Members by Domain, Article Type, and Open Access Status. Only includes research teams from article-repository pairs with a most recent commit no later than 90 days after publication and excludes research teams which are in the top 3% of total author sizes.\n\n\n\n\n\n\nControl\nSubset\nTotal Authors\nNCC-A\nCC-A\nCC-NA\n\n\nOA Status\nClosed\n5.1 ± 1.9\n4.1 ± 1.9\n1.0 ± 0.7\n0.6 ± 2.1\n\n\nOpen\n4.9 ± 1.9\n3.9 ± 2.0\n1.0 ± 0.7\n0.4 ± 1.7\n\n\nDomain\nHealth Sciences\n6.1 ± 2.5\n5.1 ± 2.6\n0.9 ± 0.6\n0.4 ± 1.2\n\n\nLife Sciences\n5.2 ± 2.1\n4.2 ± 2.2\n1.0 ± 0.7\n0.4 ± 1.2\n\n\nPhysical Sciences\n4.8 ± 1.8\n3.8 ± 1.9\n1.0 ± 0.7\n0.5 ± 1.8\n\n\nSocial Sciences\n4.5 ± 1.7\n3.5 ± 1.8\n1.1 ± 0.7\n0.3 ± 1.1\n\n\nArticle Type\npreprint\n4.8 ± 1.8\n3.8 ± 1.9\n1.0 ± 0.7\n0.6 ± 2.2\n\n\nresearch article\n4.9 ± 1.9\n3.9 ± 2.0\n1.0 ± 0.7\n0.4 ± 1.6\n\n\nsoftware article\n4.7 ± 1.9\n3.2 ± 1.9\n1.5 ± 1.4\n1.0 ± 1.1\n\n\nOverall\n\n4.9 ± 1.9\n3.9 ± 2.0\n1.0 ± 0.7\n0.5 ± 1.7\n\n\n\n\n\n\n\n\nWhen examining these patterns over time and across different team sizes (Figure 1), we found that both the number of code-contributing authors and unrecognized contributors has remained relatively stable. This stability suggests that while the exclusion of code contributors from authorship isn’t worsening, it represents a persistent feature of scientific software development rather than a historical artifact or transition period in research practices.\n\n\n\n\n\n\n\n\nFigure 1: Mean number of Non-Code-Contributing Authors, Code-Contributing Authors, and Code-Contributing Non-Authors by Publication Year and by Total Number of Authors. Only includes article-repository pairs with a most recent commit no later than 90 days after publication and excludes research-teams which are in the top 3% of total author sizes for publication years with 50 or more articles.\n\n\n\n\n\n\n4.1.1 Modeling Article Citations\nBuilding upon previous work examining the effects of team size and team diversity on scientific impact and software quality (see Section 2), we investigate how the number of code contributors within a research team may be associated with an article’s research impact. We hypothesize that more code contributors may signal greater technical complexity in research, which may be associated with higher citation counts as the community builds upon more technically sophisticated works.\nUsing our filtered dataset of article-repository pairs, we conducted multiple regression analyses to examine these relationships while controlling for various factors. Without controlling for domain, open access, or article type differences (Table 4), we found a modest positive association between the number of code-contributing authors and article citations, with each code-contributing author being associated with a 5.2% increase in article citations (p &lt; 0.001).\nWhen controlling for article type (Table 7), we observed divergent patterns between preprints and research articles. For preprints, each code-contributing non-author was associated with a statistically significant 3.1% decrease in citations (p &lt; 0.005). In contrast, research articles showed more positive associations: we found a significant positive relationship between code-contributing authors and citations (p &lt; 0.001), though we cannot estimate the precise magnitude due to the non-significant main effect in the model. Additionally, each code-contributing non-author was associated with a 0.7% increase in expected citations for research articles (p &lt; 0.001).\nOverall, while we find statistically significant associations between code contributions and citation counts, these effects are relatively modest in magnitude."
  },
  {
    "objectID": "qss-code-authors.html#characteristics-of-scientific-code-contributors",
    "href": "qss-code-authors.html#characteristics-of-scientific-code-contributors",
    "title": "Code Contribution and Scientific Authorship",
    "section": "4.2 Characteristics of Scientific Code Contributors",
    "text": "4.2 Characteristics of Scientific Code Contributors\n\n4.2.1 Author Positions of Code Contributing Authors\nBuilding upon previous work examining the relationship between authorship position and research contributions, we investigate how author position may relate to code contribution patterns. We hypothesize that first authors, who traditionally contribute the bulk of intellectual and experimental work, would be most likely to contribute code to a project, while middle and last authors, who often provide oversight and guidance, would be less likely to contribute code.\nTo analyze these patterns within our previously filtered dataset of article-repository pairs, we first conducted chi-square tests of independence between author position and code contribution status. These tests revealed significant associations both overall and when controlling for research domain, article type, and open access status (all p &lt; 0.01). Following these significant results, detailed post-hoc binomial tests (Table 8) revealed clear position-based differences: 67.4% of first authors contributed code to their projects, compared to only 8.5% of middle authors and 8.7% of last authors. These differences remained statistically significant across all tested scenarios, regardless of research domain, article type, or open access status.\nThese patterns strongly align with traditional scientific authorship conventions, where first authors typically take primary responsibility for both intellectual and technical aspects of the research, while middle and last authors more commonly provide oversight and guidance. The consistency of these findings across different subsets of our data suggests a deeply embedded relationship between author position and technical contributions in scientific software development.\n\n\n4.2.2 Corresponding Status of Code Contributing Authors\nBuilding upon our analysis of author position, we next examine how corresponding author status relates to code contribution patterns. We hypothesize that corresponding authors, who traditionally maintain research artifacts and serve as primary points of contact, would be more likely to contribute code compared to non-corresponding authors, as this role often involves responsibility for project resources and materials.\nTo analyze these relationships within our filtered dataset of article-repository pairs, we conducted chi-square tests of independence between corresponding author status and code contribution status. Surprisingly, these tests revealed patterns contrary to our initial hypothesis. Both corresponding and non-corresponding authors were significantly less likely to be code contributors than would be expected by chance (p &lt; 0.01), with only 29.5% of corresponding authors and 19.9% of non-corresponding authors contributing code. Detailed post-hoc binomial tests (Table 9) revealed this pattern holds true across nearly all conditions, with only two notable exceptions: corresponding authors in software-focused articles and those in closed-access publications showed no significant difference in their likelihood to contribute code.\nThese findings challenge conventional assumptions about the relationship between corresponding authorship and technical contributions. While corresponding authors are traditionally responsible for maintaining research artifacts, our results suggest this responsibility may not typically extend to direct engagement with software development.\n\n\n4.2.3 Modeling Author H-Index\nBuilding upon previous work examining career implications for researchers who prioritize software development Section 2, we investigated how varying levels of code contribution relate to scholarly impact through h-index metrics. To ensure a robust analysis, we applied several key data filtering steps. We only included researchers with at least three publications in our dataset, removed those with more than three developer account associations, and used each researcher’s most common (or most recent) domain, article type, and author position, with ties broken by the most recent occurrence. We removed h-index outliers by excluding researchers below the bottom 3rd and above the top 97th percentiles. Finally, we removed any author-developer-account pairs which had a predictive model confidence of less than 0.97.\nWe categorized researchers’ coding contributions into mutually exclusive groups: non-coders (no code contributions), any coding (code contribution in less than half of article-repository pairs), majority coding (code contribution in at least half, but not all, article-repository pairs), and always coding (code contribution in every article-repository pair).\nFigure 2 shows the distribution of author h-indices across these coding frequency groups, grouped by author position, publication type, and research domain.\n\n\n\n\n\n\n\n\nFigure 2: Distribution of author h-index by coding frequency across three key publication factors. Results are grouped by each author’s most frequent: (1) position in publication bylines (first, middle, or last), (2) publication type (preprint, research article, or software article), and (3) research domain (Social Sciences, Physical Sciences, Health Sciences, or Life Sciences). Within each subplot, h-indices are divided by the author’s coding frequency: ‘none’ (no coding in any of their publications), ‘any’ (coding in at least one but fewer than half of their publications), ‘majority’ (coding in at least half but not all of their publications), and ‘always’ (coding in each of their publications). Authors are only included if they have three or more publications within our dataset and are associated with no more than three developer accounts, with each association have a predicted model confidence of at least 97%.\n\n\n\n\n\nOur analysis revealed a consistent and statistically significant negative relationship between code contribution frequency and h-index across multiple analytical controls. In our initial uncontrolled analysis (Table 10), we observed increasingly negative h-index effects as coding frequency increased. Compared to non-coding authors, researchers were associated with progressively lower h-indices: occasional code contributors showed a ~27.3% lower h-index (p &lt; 0.001), majority code contributors demonstrated a ~53.5% lower h-index (p &lt; 0.001), and always coding authors exhibited a ~62.1% lower h-index (p &lt; 0.001).\nWhen controlling for author position (Table 11), we found a general pattern of reduced h-indices with increased code contribution, with one notable exception. Occasional coding first authors were associated with a ~14.9% higher h-index (p &lt; 0.001), while always coding first authors saw a ~21.6% reduction compared to non-coding first authors (p &lt; 0.001). For middle and last authors, the pattern was more consistently negative. Middle authors who occasionally coded showed a ~26.6% lower h-index (p &lt; 0.001), and those always coding demonstrated a ~52.9% lower h-index (p &lt; 0.001). Similarly, last authors who occasionally coded experienced a ~13.1% lower h-index (p &lt; 0.001), with always coding authors showing a ~45.7% lower h-index (p &lt; 0.001).\nWhen controlling for research domain (Table 12), majority coding scientists showed significant h-index reductions across all domains. Health sciences researchers saw the most dramatic reduction at ~76.5% (p &lt; 0.001), followed by physical sciences at ~52.6% (p &lt; 0.001), social sciences at ~51.4% (p &lt; 0.001), and life sciences at ~47.1% (p &lt; 0.001).\nAnalyzing by common article type (Table 13) revealed similar patterns. For authors primarily publishing preprints, the h-index reductions were substantial: ~25.6% for occasional coding, ~53.5% for majority coding, and ~62.9% for always coding authors. Authors primarily publishing software articles showed slightly different but still significant reductions: ~33.1% for majority coding and ~33.0% for always coding authors.\nTaken as a whole, these findings indicate that the more frequently an author contributes code, the lower their h-index is likely to be relative to their peers, with the notable exception of first authors who occasionally contribute code. What makes these results particularly striking is that each of our models includes publication count as an input feature, suggesting that these h-index reductions persist even when accounting for total research output."
  },
  {
    "objectID": "qss-code-authors.html#limitations",
    "href": "qss-code-authors.html#limitations",
    "title": "Code Contribution and Scientific Authorship",
    "section": "5.1 Limitations",
    "text": "5.1 Limitations\nOur data collection approach introduces several methodological constraints that should be considered when interpreting these results. By focusing exclusively on GitHub repositories, we likely miss contributions stored on alternative platforms such as GitLab, Bitbucket, or institutional repositories, potentially skewing our understanding of contribution patterns. As Trujillo, Hébert-Dufresne, and Bagrow (2022), Cao et al. (2023), and Escamilla et al. (2022) have all noted, while GitHub is the predominate host of scientific software, significant portions of research code exist on other platforms. Additionally, our reliance on public repositories means we cannot account for private repositories or code that was never publicly shared, potentially underrepresenting sensitive research areas or proprietary methods.\nOur predictive modeling approach for matching authors with developer accounts presents additional limitations in how we operationalize the relationship between code contributions and authorship. The model’s performance can be affected by shorter names where less textual information is available for matching, potentially creating biases against researchers from cultures with shorter naming conventions. Organization accounts used for project management pose particular challenges for accurate matching, and while we implemented filtering mechanisms to minimize their impact, some misclassifications may persist. Furthermore, our approach may not capture all code contributors if multiple individuals developed code but only one uploaded it to a repository, creating attribution artifacts that may systematically underrepresent certain types of contributors, particularly junior researchers or technical staff who may not have direct repository access.\nOur analytical approach required substantial data filtering to ensure reliable results, which introduces potential selection biases in our sample. By focusing on article-repository pairs with commit activity no later than 90 days past the date of article publication and at least 3 authors and less than 12 authors, we may have systematically excluded certain types of research projects, particularly those with extended development timelines or unusually large collaborations. Our categorization of coding status (non-coder, any coding, majority coding, always coding) necessarily simplifies complex contribution patterns and does not account for the quality, complexity, or significance of code contributions. Additionally, our reliance on OpenAlex metadata introduces certain limitations to our analysis. While OpenAlex provides good overall coverage, it lags behind proprietary databases in indexing references and citations which may affect our citation-based analyses and the completeness of author metadata used in our study (Alperin et al. 2024)."
  },
  {
    "objectID": "qss-code-authors.html#future-work",
    "href": "qss-code-authors.html#future-work",
    "title": "Code Contribution and Scientific Authorship",
    "section": "5.2 Future Work",
    "text": "5.2 Future Work\nFuture technical improvements may enhance our understanding of the relationship between software development and scientific recognition systems. Expanding analysis beyond GitHub to include other code hosting platforms would provide a more comprehensive understanding of scientific software development practices across different domains and institutional contexts. More sophisticated entity matching techniques could improve author-developer account identification, particularly for cases with limited information or common names. Developing more nuanced measures of code contribution quality and significance beyond binary contribution identification would better capture the true impact of technical contributions to research. These methodological advances would enable more precise tracking of how code contributions translate—or fail to translate—into formal scientific recognition, providing clearer evidence for policy interventions.\nOur findings point to several directions for future research on the changing nature of scientific labor and recognition. Longitudinal studies tracking how code contribution patterns affect career trajectories would provide valuable insights into the long-term impacts of the observed h-index disparities and whether these effects vary across career stages. Comparative analyses across different scientific domains could reveal discipline-specific norms and practices around software recognition, potentially identifying models that more equitably credit technical contributions. Qualitative studies examining how research teams make authorship decisions regarding code contributors would complement our quantitative findings by illuminating the social and organizational factors that influence recognition practices. Additionally, to better understand corresponding authors’ role in maintaining research artifacts, future work could remove the 90-day post-publication commit activity filter to examine long-term sustainability actions, though this approach would need to address the introduction of contributors unrelated to the original paper.\nThe persistent underrecognition of software contributions despite their growing importance suggests a need for structural interventions in how we conceptualize and reward scientific work. Building upon efforts like CRediT (Brand et al. 2015), future work should investigate potential policy changes to better align institutional incentives with the diverse spectrum of contributions that drive modern scientific progress. However, as the example of CRediT demonstrates, even well-intentioned taxonomies may reproduce existing hierarchies or create new forms of inequality if they fail to address underlying power dynamics in scientific communities. The challenge is not merely technical but social: how to create recognition systems that simultaneously support innovation, ensure appropriate credit, maintain research integrity, and foster equitable participation in an increasingly computational scientific enterprise."
  },
  {
    "objectID": "qss-code-authors.html#extended-modeling-and-analysis-results-and-supporting-tables",
    "href": "qss-code-authors.html#extended-modeling-and-analysis-results-and-supporting-tables",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.1 Extended Modeling and Analysis Results and Supporting Tables",
    "text": "7.1 Extended Modeling and Analysis Results and Supporting Tables\n\n7.1.1 Full Comparison of Models and Optional Features for Author-Developer-Account Matching\n\n\n\n\nTable 3: Comparison of Models for Author-Developer-Account Matching\n\n\n\n\n\n\n\n\n\n\nOptional Feats.\nModel\nAccuracy\nPrecision\nRecall\nF1\n\n\n\n\n0\nname\ndeberta\n0.984\n0.938\n0.950\n0.944\n\n\n1\nname, email\nbert-multilingual\n0.984\n0.938\n0.950\n0.944\n\n\n2\nname, email\ndeberta\n0.982\n0.907\n0.975\n0.940\n\n\n3\nname\nbert-multilingual\n0.982\n0.938\n0.938\n0.938\n\n\n4\nname\ndistilbert\n0.978\n0.936\n0.912\n0.924\n\n\n5\nname, email\ndistilbert\n0.978\n0.936\n0.912\n0.924\n\n\n6\nemail\ndeberta\n0.957\n0.859\n0.838\n0.848\n\n\n7\nemail\nbert-multilingual\n0.950\n0.894\n0.738\n0.808\n\n\n8\nn/a\ndeberta\n0.946\n0.847\n0.762\n0.803\n\n\n9\nn/a\nbert-multilingual\n0.941\n0.862\n0.700\n0.772\n\n\n10\nn/a\ndistilbert\n0.856\n0.000\n0.000\n0.000\n\n\n11\nemail\ndistilbert\n0.856\n0.000\n0.000\n0.000\n\n\n\n\n\n\n\n\n\n\n\n\n7.1.2 Linear Models for Software Development Dynamics Within Research Teams\n\n\n\n\nTable 4: Article Citations by Code Contributorship of Research Team\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n22127\n\n\nModel:\nGLM\nDf Residuals:\n22122\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n4\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-76532.\n\n\nDate:\nFri, 28 Feb 2025\nDeviance:\n22300.\n\n\nTime:\n23:11:55\nPearson chi2:\n3.39e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.2877\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.9842\n0.026\n38.451\n0.000\n0.934\n1.034\n\n\nTotal Authors\n0.0692\n0.004\n18.487\n0.000\n0.062\n0.076\n\n\nCode-Contrib. Authors\n0.0502\n0.010\n4.847\n0.000\n0.030\n0.071\n\n\nCode-Contrib. Non-Authors\n-0.0019\n0.004\n-0.451\n0.652\n-0.010\n0.006\n\n\nYears Since Publication\n0.3905\n0.004\n96.908\n0.000\n0.383\n0.398\n\n\n\n\n\n\n\n\n\n\n\n\nTable 5: Article Citations by Code Contributorship of Research Team Controlled by Open Access Status\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n22127\n\n\nModel:\nGLM\nDf Residuals:\n22119\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n7\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-76464.\n\n\nDate:\nFri, 28 Feb 2025\nDeviance:\n22163.\n\n\nTime:\n23:11:55\nPearson chi2:\n3.36e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.2921\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.6143\n0.061\n10.103\n0.000\n0.495\n0.734\n\n\nTotal Authors\n0.0697\n0.004\n18.610\n0.000\n0.062\n0.077\n\n\nCode-Contrib. Authors\n0.0513\n0.045\n1.129\n0.259\n-0.038\n0.140\n\n\nCode-Contrib. Non-Authors\n0.0012\n0.015\n0.082\n0.935\n-0.028\n0.031\n\n\nYears Since Publication\n0.3811\n0.004\n93.064\n0.000\n0.373\n0.389\n\n\nIs Open Access\n0.4098\n0.059\n6.892\n0.000\n0.293\n0.526\n\n\nCode-Contrib. Authors * Is Open Access\n-0.0010\n0.047\n-0.021\n0.983\n-0.092\n0.090\n\n\nCode-Contrib. Non-Authors * Is Open Access\n-0.0025\n0.016\n-0.160\n0.873\n-0.033\n0.028\n\n\n\n\n\n\n\n\n\n\n\n\nTable 6: Article Citations by Code Contributorship of Research Team Controlled by Domain\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n22127\n\n\nModel:\nGLM\nDf Residuals:\n22113\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n13\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-76441.\n\n\nDate:\nFri, 28 Feb 2025\nDeviance:\n22118.\n\n\nTime:\n23:11:56\nPearson chi2:\n3.34e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.2936\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.8852\n0.067\n13.289\n0.000\n0.755\n1.016\n\n\nTotal Authors\n0.0709\n0.004\n18.633\n0.000\n0.063\n0.078\n\n\nCode-Contrib. Authors\n0.0230\n0.052\n0.442\n0.659\n-0.079\n0.125\n\n\nCode-Contrib. Non-Authors\n0.0131\n0.026\n0.500\n0.617\n-0.038\n0.064\n\n\nYears Since Publication\n0.3969\n0.004\n97.367\n0.000\n0.389\n0.405\n\n\nDomain Life Sciences\n-0.2025\n0.075\n-2.687\n0.007\n-0.350\n-0.055\n\n\nDomain Physical Sciences\n0.1262\n0.063\n2.018\n0.044\n0.004\n0.249\n\n\nDomain Social Sciences\n-0.1895\n0.080\n-2.369\n0.018\n-0.346\n-0.033\n\n\nCode-Contrib. Authors * Domain Life Sciences\n0.0661\n0.063\n1.046\n0.296\n-0.058\n0.190\n\n\nCode-Contrib. Authors * Domain Physical Sciences\n0.0173\n0.053\n0.326\n0.745\n-0.087\n0.122\n\n\nCode-Contrib. Authors * Domain Social Sciences\n0.1118\n0.065\n1.712\n0.087\n-0.016\n0.240\n\n\nCode-Contrib. Non-Authors * Domain Life Sciences\n-0.0388\n0.034\n-1.125\n0.261\n-0.106\n0.029\n\n\nCode-Contrib. Non-Authors * Domain Physical Sciences\n-0.0159\n0.027\n-0.598\n0.550\n-0.068\n0.036\n\n\nCode-Contrib. Non-Authors * Domain Social Sciences\n-0.0347\n0.036\n-0.964\n0.335\n-0.105\n0.036\n\n\n\n\n\n\n\n\n\n\n\n\nTable 7: Article Citations by Code Contributorship of Research Team Controlled by Article Type\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n22127\n\n\nModel:\nGLM\nDf Residuals:\n22116\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n10\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-76088.\n\n\nDate:\nFri, 28 Feb 2025\nDeviance:\n21412.\n\n\nTime:\n23:11:56\nPearson chi2:\n3.25e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.3158\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.5104\n0.042\n12.288\n0.000\n0.429\n0.592\n\n\nTotal Authors\n0.0688\n0.004\n18.358\n0.000\n0.061\n0.076\n\n\nCode-Contrib. Authors\n-0.0188\n0.027\n-0.693\n0.488\n-0.072\n0.034\n\n\nCode-Contrib. Non-Authors\n-0.0310\n0.010\n-3.247\n0.001\n-0.050\n-0.012\n\n\nYears Since Publication\n0.4024\n0.004\n99.444\n0.000\n0.394\n0.410\n\n\nArticle Type Research Article\n0.4857\n0.038\n12.815\n0.000\n0.411\n0.560\n\n\nArticle Type Software Article\n-0.4631\n0.131\n-3.540\n0.000\n-0.720\n-0.207\n\n\nCode-Contrib. Authors * Article Type Research Article\n0.0923\n0.029\n3.130\n0.002\n0.035\n0.150\n\n\nCode-Contrib. Authors * Article Type Software Article\n-0.0672\n0.065\n-1.030\n0.303\n-0.195\n0.061\n\n\nCode-Contrib. Non-Authors * Article Type Research Article\n0.0383\n0.011\n3.595\n0.000\n0.017\n0.059\n\n\nCode-Contrib. Non-Authors * Article Type Software Article\n0.0788\n0.073\n1.075\n0.282\n-0.065\n0.222\n\n\n\n\n\n\n\n\n\n\n7.1.3 Post-Hoc Tests for Coding vs Non-Coding Authors by Position\n\n\n\n\nTable 8: Counts of Code-Contributing Authors (‘Coding’) as well as Total Authors by Position and Bonferroni Corrected p-values from Post-Hoc Binomial Tests\n\n\n\n\n\n\nControl\nSubset\nPosition\nCoding\nTotal\np\n\n\nDomain\nHealth Sciences\nFirst\n1535\n2404\n0.000***\n\n\nMiddle\n510\n11513\n0.000***\n\n\nLast\n228\n2352\n0.000***\n\n\nLife Sciences\nFirst\n2538\n3890\n0.000***\n\n\nMiddle\n815\n11854\n0.000***\n\n\nLast\n469\n3778\n0.000***\n\n\nPhysical Sciences\nFirst\n28426\n41983\n0.000***\n\n\nMiddle\n10022\n111735\n0.000***\n\n\nLast\n3303\n40407\n0.000***\n\n\nSocial Sciences\nFirst\n2766\n4044\n0.000***\n\n\nMiddle\n989\n9251\n0.000***\n\n\nLast\n397\n3861\n0.000***\n\n\nArticle Type\nPreprint\nFirst\n13146\n19523\n0.000***\n\n\nMiddle\n4872\n52925\n0.000***\n\n\nLast\n1432\n18598\n0.000***\n\n\nResearch Article\nFirst\n21595\n32081\n0.000***\n\n\nMiddle\n7034\n89991\n0.000***\n\n\nLast\n2801\n31188\n0.000***\n\n\nSoftware Article\nFirst\n524\n717\n0.000***\n\n\nMiddle\n430\n1437\n0.000***\n\n\nLast\n164\n612\n0.000***\n\n\nOpen Access Status\nClosed Access\nFirst\n2587\n3742\n0.000***\n\n\nMiddle\n861\n10965\n0.000***\n\n\nLast\n266\n3642\n0.000***\n\n\nOpen Access\nFirst\n32678\n48579\n0.000***\n\n\nMiddle\n11475\n133388\n0.000***\n\n\nLast\n4131\n46756\n0.000***\n\n\nOverall\nOverall\nFirst\n35265\n52321\n0.000***\n\n\nMiddle\n12336\n144353\n0.000***\n\n\nLast\n4397\n50398\n0.000***\n\n\n\n\n\n\n\n\n\n\n7.1.4 Post-Hoc Tests for Coding vs Non-Coding Authors by Corresponding Status\n\n\n\n\nTable 9: Counts of Code-Contributing Authors (‘Coding’) as well as Total Authors by Corresponding Status and Bonferroni Corrected p-values from Post-Hoc Binomial Tests\n\n\n\n\n\n\nControl\nSubset\nIs Corresponding\nCoding\nTotal\np\n\n\nDomain\nLife Sciences\nCorresponding\n1720\n8014\n0.000***\n\n\nNot Corresponding\n2102\n11508\n0.000***\n\n\nPhysical Sciences\nCorresponding\n5146\n12483\n0.000***\n\n\nNot Corresponding\n36605\n181642\n0.000***\n\n\nSocial Sciences\nCorresponding\n789\n2455\n0.000***\n\n\nNot Corresponding\n3363\n14701\n0.000***\n\n\nArticle Type\nPreprint\nCorresponding\n760\n1036\n0.000***\n\n\nNot Corresponding\n18690\n90010\n0.000***\n\n\nResearch Article\nCorresponding\n7545\n27339\n0.000***\n\n\nNot Corresponding\n23885\n125921\n0.000***\n\n\nSoftware Article\nCorresponding\n206\n438\n0.464\n\n\nNot Corresponding\n912\n2328\n0.000***\n\n\nOpen Access Status\nClosed Access\nCorresponding\n250\n468\n0.304\n\n\nNot Corresponding\n3464\n17881\n0.000***\n\n\nOpen Access\nCorresponding\n8261\n28345\n0.000***\n\n\nNot Corresponding\n40023\n200378\n0.000***\n\n\nOverall\nOverall\nCorresponding\n8511\n28813\n0.000***\n\n\nNot Corresponding\n43487\n218259\n0.000***\n\n\n\n\n\n\n\n\n\n\n7.1.5 Linear Models for Characterizing Code-Contributing Author H-Index\n\n\n\n\nTable 10: Code-Contributing Authors H-Index by Coding Status\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49355\n\n\nModel:\nGLM\nDf Residuals:\n49350\n\n\nModel Family:\nGaussian\nDf Model:\n4\n\n\nLink Function:\nLog\nScale:\n197.81\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-2.0051e+05\n\n\nDate:\nFri, 28 Feb 2025\nDeviance:\n9.7618e+06\n\n\nTime:\n23:11:58\nPearson chi2:\n9.76e+06\n\n\nNo. Iterations:\n43\nPseudo R-squ. (CS):\n0.1799\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.1910\n0.004\n832.251\n0.000\n3.184\n3.199\n\n\nWorks Count\n0.0001\n1.98e-06\n66.574\n0.000\n0.000\n0.000\n\n\nAny Coding\n-0.3188\n0.007\n-43.308\n0.000\n-0.333\n-0.304\n\n\nMajority Coding\n-0.7653\n0.014\n-55.218\n0.000\n-0.792\n-0.738\n\n\nAlways Coding\n-0.9701\n0.025\n-39.065\n0.000\n-1.019\n-0.921\n\n\n\n\n\n\n\n\n\n\n\n\nTable 11: Researcher H-Index by Coding Status Controlled by Most Freq. Author Position\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49355\n\n\nModel:\nGLM\nDf Residuals:\n49342\n\n\nModel Family:\nGaussian\nDf Model:\n12\n\n\nLink Function:\nLog\nScale:\n180.01\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-1.9818e+05\n\n\nDate:\nFri, 28 Feb 2025\nDeviance:\n8.8819e+06\n\n\nTime:\n23:11:58\nPearson chi2:\n8.88e+06\n\n\nNo. Iterations:\n44\nPseudo R-squ. (CS):\n0.2717\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n2.3772\n0.034\n70.483\n0.000\n2.311\n2.443\n\n\nWorks Count\n0.0001\n1.97e-06\n67.398\n0.000\n0.000\n0.000\n\n\nAny Coding\n0.1388\n0.043\n3.224\n0.001\n0.054\n0.223\n\n\nMajority Coding\n-0.0674\n0.039\n-1.734\n0.083\n-0.144\n0.009\n\n\nAlways Coding\n-0.2432\n0.044\n-5.481\n0.000\n-0.330\n-0.156\n\n\nCommon Author Position Last\n1.0456\n0.034\n30.622\n0.000\n0.979\n1.113\n\n\nCommon Author Position Middle\n0.7432\n0.034\n21.809\n0.000\n0.676\n0.810\n\n\nAny Coding * Common Author Position Last\n-0.2793\n0.045\n-6.265\n0.000\n-0.367\n-0.192\n\n\nAny Coding * Common Author Position Middle\n-0.4483\n0.044\n-10.200\n0.000\n-0.534\n-0.362\n\n\nMajority Coding * Common Author Position Last\n-0.3515\n0.048\n-7.310\n0.000\n-0.446\n-0.257\n\n\nMajority Coding * Common Author Position Middle\n-0.6074\n0.044\n-13.824\n0.000\n-0.694\n-0.521\n\n\nAlways Coding * Common Author Position Last\n-0.3680\n0.074\n-4.970\n0.000\n-0.513\n-0.223\n\n\nAlways Coding * Common Author Position Middle\n-0.5090\n0.067\n-7.641\n0.000\n-0.640\n-0.378\n\n\n\n\n\n\n\n\n\n\n\n\nTable 12: Researcher H-Index by Coding Status Controlled by Most Freq. Domain\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49355\n\n\nModel:\nGLM\nDf Residuals:\n49338\n\n\nModel Family:\nGaussian\nDf Model:\n16\n\n\nLink Function:\nLog\nScale:\n196.53\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-2.0034e+05\n\n\nDate:\nFri, 28 Feb 2025\nDeviance:\n9.6964e+06\n\n\nTime:\n23:11:58\nPearson chi2:\n9.70e+06\n\n\nNo. Iterations:\n48\nPseudo R-squ. (CS):\n0.1865\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.3211\n0.018\n187.804\n0.000\n3.286\n3.356\n\n\nWorks Count\n0.0001\n2.06e-06\n66.485\n0.000\n0.000\n0.000\n\n\nAny Coding\n-0.3851\n0.044\n-8.742\n0.000\n-0.471\n-0.299\n\n\nMajority Coding\n-1.4412\n0.101\n-14.274\n0.000\n-1.639\n-1.243\n\n\nAlways Coding\n-1.2233\n0.185\n-6.596\n0.000\n-1.587\n-0.860\n\n\nCommon Domain Life Sciences\n0.1022\n0.025\n4.023\n0.000\n0.052\n0.152\n\n\nCommon Domain Physical Sciences\n-0.1431\n0.018\n-7.890\n0.000\n-0.179\n-0.108\n\n\nCommon Domain Social Sciences\n-0.1591\n0.030\n-5.248\n0.000\n-0.219\n-0.100\n\n\nAny Coding * Common Domain Life Sciences\n0.0965\n0.057\n1.683\n0.092\n-0.016\n0.209\n\n\nAny Coding * Common Domain Physical Sciences\n0.0690\n0.045\n1.542\n0.123\n-0.019\n0.157\n\n\nAny Coding * Common Domain Social Sciences\n-0.0003\n0.072\n-0.005\n0.996\n-0.142\n0.141\n\n\nMajority Coding * Common Domain Life Sciences\n0.7996\n0.117\n6.833\n0.000\n0.570\n1.029\n\n\nMajority Coding * Common Domain Physical Sciences\n0.6942\n0.102\n6.809\n0.000\n0.494\n0.894\n\n\nMajority Coding * Common Domain Social Sciences\n0.7387\n0.131\n5.636\n0.000\n0.482\n0.996\n\n\nAlways Coding * Common Domain Life Sciences\n0.3149\n0.211\n1.492\n0.136\n-0.099\n0.729\n\n\nAlways Coding * Common Domain Physical Sciences\n0.2544\n0.187\n1.358\n0.174\n-0.113\n0.621\n\n\nAlways Coding * Common Domain Social Sciences\n0.3200\n0.218\n1.465\n0.143\n-0.108\n0.748\n\n\n\n\n\n\n\n\n\n\n\n\nTable 13: Researcher H-Index by Coding Status Controlled by Most Freq. Article Type\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49355\n\n\nModel:\nGLM\nDf Residuals:\n49342\n\n\nModel Family:\nGaussian\nDf Model:\n12\n\n\nLink Function:\nLog\nScale:\n194.43\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-2.0008e+05\n\n\nDate:\nFri, 28 Feb 2025\nDeviance:\n9.5937e+06\n\n\nTime:\n23:11:58\nPearson chi2:\n9.59e+06\n\n\nNo. Iterations:\n47\nPseudo R-squ. (CS):\n0.1970\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.0971\n0.006\n527.713\n0.000\n3.086\n3.109\n\n\nWorks Count\n0.0001\n1.99e-06\n64.413\n0.000\n0.000\n0.000\n\n\nAny Coding\n-0.2953\n0.011\n-27.851\n0.000\n-0.316\n-0.274\n\n\nMajority Coding\n-0.7661\n0.021\n-37.076\n0.000\n-0.807\n-0.726\n\n\nAlways Coding\n-0.9917\n0.039\n-25.315\n0.000\n-1.068\n-0.915\n\n\nCommon Article Type Research Article\n0.1816\n0.008\n23.690\n0.000\n0.167\n0.197\n\n\nCommon Article Type Software Article\n0.2247\n0.056\n4.040\n0.000\n0.116\n0.334\n\n\nAny Coding * Common Article Type Research Article\n-0.0209\n0.015\n-1.425\n0.154\n-0.050\n0.008\n\n\nAny Coding * Common Article Type Software Article\n0.1893\n0.100\n1.889\n0.059\n-0.007\n0.386\n\n\nMajority Coding * Common Article Type Research Article\n0.0071\n0.028\n0.256\n0.798\n-0.047\n0.062\n\n\nMajority Coding * Common Article Type Software Article\n0.3646\n0.090\n4.049\n0.000\n0.188\n0.541\n\n\nAlways Coding * Common Article Type Research Article\n0.0043\n0.052\n0.083\n0.934\n-0.097\n0.105\n\n\nAlways Coding * Common Article Type Software Article\n0.3653\n0.107\n3.400\n0.001\n0.155\n0.576"
  },
  {
    "objectID": "qss-code-authors.html#analysis-of-project-duration-and-percentage-code-contributors-who-are-authors",
    "href": "qss-code-authors.html#analysis-of-project-duration-and-percentage-code-contributors-who-are-authors",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.2 Analysis of Project Duration and Percentage Code-Contributors Who Are Authors",
    "text": "7.2 Analysis of Project Duration and Percentage Code-Contributors Who Are Authors\nIn our pre-registered analysis plan (https://osf.io/fc74m), we originally hypothesized about the relationship between project duration and authorship recognition. Specifically, we posited that sustained technical engagement and scientific recognition might be meaningfully related, with longer project durations potentially leading to higher rates of code-contributor authorship. We saw repository histories as providing a unique opportunity to examine this relationship, leading us to hypothesize that projects with longer commit durations would be associated with higher percentages of developers receiving authorship recognition (pre-registered as H2).\nHowever, our analysis found no evidence to support this hypothesis. When examining the relationship between a repository’s commit duration and the percentage of developers who receive authorship recognition, we found no significant correlation (r = -0.00, p = n.s.). This suggests that the length of time a project has been in development has no meaningful relationship with the proportion of developers who are recognized as authors.\nWe ultimately decided to move this analysis to the appendix for two key methodological reasons. First, our approach of using repository-level commit duration as a proxy for individual contribution patterns proved too coarse-grained. A more precise analysis would need to examine individual-level contribution durations and patterns rather than overall project length. Second, our method did not account for the varying levels of contribution that different developers make to a repository. Simply correlating overall project duration with authorship rates fails to capture the nuanced ways that sustained, meaningful technical contributions might influence authorship decisions.\nThese limitations suggest potential directions for future work that could more rigorously examine the relationship between long-term technical engagement and scientific recognition. Such work might benefit from more granular analysis of individual contribution patterns, perhaps incorporating measures of contribution significance and sustainability rather than just temporal duration."
  }
]