[
  {
    "objectID": "qss-code-authors.html",
    "href": "qss-code-authors.html",
    "title": "Code Contribution and Credit in Science",
    "section": "",
    "text": "Recent advances in genomic sequencing, climate modeling, particle physics, and neuroimaging have all required the development of novel scientific software (Hocquet et al. 2024). In many ways, software development has changed how scientific work is organized and performed, but we lack large-scale quantitative evidence characterizing these effects. This lack of evidence has important consequences. Scientific institutions continue to rely heavily on bibliometric indicators to evaluate research productivity (Haustein and Larivière 2014), but software is rarely mentioned or cited in research publications (Du et al. 2021). As a result, researchers who invest substantial effort in building computational tools may face systematic disadvantages in career advancement. We argue that understanding whether and how software contributions translate into formal scientific credit is important for designing equitable reward structures and evidence-based science policy.\nThe challenge of measuring software’s role in science stems, in part, from the historical separation of code from publication. Scientific articles and their metadata (e.g. author lists, citations, and acknowledgments) can provide a valuable tool for estimating productivity, tracing collaboration, or inferring impact (Fortunato et al. 2018). However, software contributions often remain invisible in these records, making it difficult to quantify their relationship to traditional markers of scientific productivity (Weber and Thomer 2014). As a result, studies of scientific software have relied primarily on self-reports (surveys) (Carver et al. 2022) or participant observation (ethnographies) (Paine and Lee 2017), which provide valuable insights but are limited in the scope and generalizability.\nIn the following paper, we overcome this challenge by constructing a dataset (rs-graph-v1) of 138,596 research articles and their associated code repositories. Using this data we then develop a machine learning model to match article authors with repository contributor accounts. By connecting papers to repositories, and authors to developers, we are able to observe both the presence and effect of code contributions across different authorship positions and examine how coding activity relates to both article-level citations and career-level productivity metrics (e.g., h-index). This approach enables us to address fundamental questions about the scientific reward system: How do software contributions correspond to authorship positions? Does coding effort translate into citation impact? How do patterns of code contribution relate to long-term career trajectories?\nIn analyzing rs-graph-v1 we identify three patterns that distinguish code contributions from other forms of scientific recognition. First, we show that 28.6% (n=6,529) of articles have non-author code-contributors, or individuals who may have helped create the software but received no formal authorship credit. We also show that code-contributing authors are associated with a modest increase in article-level impact metrics (on average, a 4.2% increase in citations per code-contributing author), but these effects become statistically non-significant when controlling for domain, article type, and open access status. Second, we find that first authors are significantly more likely to be code contributors than other author positions across all conditions tested. Third, we find a negative relationship between coding frequency and scholarly impact: Authors who contribute code more frequently show progressively lower h-indices than their non-coding peers, a pattern that persists even when controlling for publication count, and author’s most common author position (first, middle, or last), domain (Physical Sciences, Health Sciences, Life Sciences, or Social Sciences), and article type (preprint, research article, or software article) 1.\n1 We use the phrase “most common” to mean most frequent, and in the case of a tie, their most recent. That is, if an author has been first author on four publications in our dataset, middle author on two publications, and has never been last author, they are considered a “first author” for the purposes of our analysis. We discuss the limitations of this approach in the Section 5.The remainder of this paper proceeds as follows: First, we review related work regarding software development and the recognition of code contributors in scientific credit systems. In doing so, we motivate three specific hypotheses that guide our investigation. Next, we provide an overview of our data and methods, describing how we linked articles to repoistories, trained and evaluated a predictive model for entity matching, and applied this model across each article-repository pair. We then present our analysis, focusing on article-level dynamics before moving to individual-level (career) patterns, formally accepting or rejecting each hypothesis based on our findings."
  },
  {
    "objectID": "qss-code-authors.html#h1-research-team-composition-and-scientific-attention",
    "href": "qss-code-authors.html#h1-research-team-composition-and-scientific-attention",
    "title": "Code Contribution and Credit in Science",
    "section": "2.1 H1: Research Team Composition and Scientific Attention",
    "text": "2.1 H1: Research Team Composition and Scientific Attention\nIn collaborative settings, experimental and theoretical research often receives more citations than methods-focused contributions, with the exception being when methods represent foundational shifts in a field (Aksnes 2006; X. Liu, Zhang, and Li 2023; Chen et al. 2024). Software is often positioned as a methodological contribution and, as a result, can be found in some of the highest-cited papers of the 21st century (Jin et al. 2015; Hampton et al. 2013; Hasselbring et al. 2024).\nPrior work also establishes a positive relationship between team size and citation count, where larger and more diverse teams produce higher-impact scientific work (Franceschet and Costantini 2010; Larivière et al. 2014; Yoo et al. 2024). Research in empirical software studies similarly finds that larger development teams tend to create more reliable software with fewer defects Herbsleb and Mockus (2003), though this comes at the expense of slower development cycles. These findings suggest that team size may be particularly important in scientific software development, where technical robustness and reproducability remain gold standards (Milewicz and Raybourn 2018).\nWe argue that the unique characteristics of scientific software development — including implementing novel algorithms, requiring deep domain knowledge, and an increased emphasis on reproducibility (Muna et al. 2016; Howison and Herbsleb 2013) — make team composition especially important for understanidng credit allocation. Software development in organized teams may enhance scientific impact through multiple mechanisms: teams can produce more robust and generalizable software tools for methodological contributions while enabling more sophisticated computational analyses and larger-scale data processing for experimental work.\nGiven these patterns in team dynamics, software development practices, and citations in collaborative research, we propose that:\nH1: The number of individuals contributing code to a publication’s associated repository positively correlates with the article’s citation count."
  },
  {
    "objectID": "qss-code-authors.html#h2-author-roles-and-technical-contributions",
    "href": "qss-code-authors.html#h2-author-roles-and-technical-contributions",
    "title": "Code Contribution and Credit in Science",
    "section": "2.2 H2: Author Roles and Technical Contributions",
    "text": "2.2 H2: Author Roles and Technical Contributions\nAuthor positions in scientific publications signal specific roles and responsibilities (Shen and Barabási 2014), a relationship that can be contemporarily studied through contribution role taxonomies like CRediT (Larivière et al. 2016). In this literature, analyses of contribution patterns consistently show that software development, data analysis, and visualization tasks typically fall to first authors (Larivière et al. 2016; Júnior et al. 2016; Larivière, Pontille, and Sugimoto 2020; Sauermann and Haeussler 2017). While these contribution patterns are often inferred from self-reported roles (e.g., CRediT) or disciplinary conventions, the linking of publications to version-controlled software repositories provides a novel window into the actual coding contributions associated with scientific papers. Given the established tendency for first authors to undertake primary research execution, including technical development, we anticipate that this pattern will be directly observable via the commit histories of scientific software repositories. Given prior findings about the distribution of technical responsibilities within research teams, we expect these repository records to reflect similar patterns of engagement with software development:\nH2a: First authors have higher code contribution rates than authors in other positions.\nFurthermore, studies that use contribution taxonomies like CRediT reveal that first authors and corresponding authors, while occasionally the same individual, often take on distinct responsibilities (Birnbaum et al. 2023). Corresponding authors traditionally bear responsibility for the integrity, archiving, and long-term availability of research artifacts and underlying data (Teunis, Nota, and Schwab 2015; Sauermann and Haeussler 2017; Silva et al. 2013; Bhandari et al. 2014). As software becomes an increasingly critical, complex, and integral research artifact in many disciplines, it logically follows that stewardship of these software componentsen should align with the responsibilities of being a corresponding author. Given prior findings about the distribution of responsibilities within research teams and the expectation of stewardship of created artifacts, we expect repository records to reflect similar patterns of engagement with software development:\nH2b: Corresponding authors have higher code contribution rates than non-corresponding authors."
  },
  {
    "objectID": "qss-code-authors.html#h3-code-contribution-and-individual-scientific-impact",
    "href": "qss-code-authors.html#h3-code-contribution-and-individual-scientific-impact",
    "title": "Code Contribution and Credit in Science",
    "section": "2.3 H3: Code Contribution and Individual Scientific Impact",
    "text": "2.3 H3: Code Contribution and Individual Scientific Impact\nDespite the increasingly central role of software in science, researchers who dedicate significant effort to its development often face systemic hurdles in receiving formal scientific credit. Their contributions may be relegated to acknowledgment sections rather than rewarded with authorship credit (Weber and Thomer 2014). Further, the scholarly practice of software citation remains inconsistent, frequently undervaluing crucial maintenance and extension work (Carver et al. 2022; Philippe et al. 2019; Lamprecht et al. 2020; Katz et al. 2020; Smith, Katz, and Niemeyer 2016). The h-index, a widely used proxy for an individual’s cumulative scientific impact, is derived from an individual’s record of formally authored publications and the citations these publications receive (Hirsch 2005). Consequently, if substantial time and intellectual effort are invested in software development that does not consistently translate into formal authorship on associated research papers, or if the software outputs themselves are not robustly and formally cited in a way that accrues to the individual developer, then the primary activities that build a researcher’s h-index are effectively diminished or bypassed.\nThis creates a structural misalignment where contributions essential for scientific advancement (i.e., software development and maintenance) may not adequately capture and could even detract from time spent on activities that bolster traditional bibliometric indicators of individual success. While collaborative software development may yield short-term benefits through increased citations on individual papers (as suggested by H1), researchers specializing in code development may face long-term career disadvantages as their expertise becomes increasingly divorced from traditional publication pathways that drive academic recognition and advancement. Based on these challenges in the recognition and citation of software contributions and their potential impact on h-index accumulation, we hypothesize:\nH3: The frequency with which individual researchers contribute code to their research projects negatively correlates with their h-index."
  },
  {
    "objectID": "qss-code-authors.html#software-development-dynamics-within-research-teams",
    "href": "qss-code-authors.html#software-development-dynamics-within-research-teams",
    "title": "Code Contribution and Credit in Science",
    "section": "4.1 Software Development Dynamics Within Research Teams",
    "text": "4.1 Software Development Dynamics Within Research Teams\nUnderstanding the composition and dynamics of software development teams provides essential context for analyzing how code contributions relate to scientific recognition and impact. To ensure reliable analysis, we focus on a subset of our article-repository pairs that meet several filtering conditions. First, to ensure that we aren’t analyzing “data repositories” (i.e. GitHub repositories which only store CSV, Parquet, or other dataset related file formats), we filter out any article-repository pairs that don’t have any programming language files 5. Next, to ensure that the research has received a basic level of engagement from the scientific community, we remove any article-repository pairs which do not have at least one citation. We then require that repository commit activity stop before 90 days past the article publication date. Disallowing long-term projects ensures we do not include projects that may add additional code contributors later while still allowing a grace period during which developers can update repositories with additional documentation and publication information. We then subset the data to only include article-repository pairs with research teams of typical size by removing those with fewer than three authors and more than 11 authors, the 97th percentile for research team size. Finally, we filter out any predicted author-developer pairs with a confidence score of less than 0.97 in order to improve robustness of our downstream analysis 6. This filtering process results in a dataset of 19,900 article-repository pairs. A table with the counts of article-repository pairs, authors, and developers by data sources, domains, document types, and access status for this filtered dataset is shown in Table 5.\n5 We use the list of programming langauges used by the GitHub platform via the Linguist software, and the GitHub API to retrieve the bytes of code per-language within each repository. We remove article-repository pairs which have a non-zero number of bytes of code for programming language files.6 Figure 5 shows the distribution of predictive model confidence scores for author-developer pairs to justify this threshold. We chose the 0.97 threshold to ensure that we only include high-confidence matches while retaining a large proportion of the data (87,175 author-developer pairs) as only 2,911 author-developer-account pairs have a confidence less than 0.97 in the whole unfiltered dataset.7 We define code-contributing authors as those who have at least one code commit to the repository associated with the article-repository pair.8 A table with the means and standard deviations for each distribution and subset of team composition is provided in the appendix in Table 6.Within this filtered dataset, we categorized individuals into three groups: code-contributing authors (CC-A) who both authored papers and committed code to associated repositories7, non-code-contributing authors (NCC-A) who authored papers but showed no evidence of code contributions, and code-contributing non-authors (CC-NA) who contributed code but received no authorship recognition. This categorization revealed that papers in our dataset typically have 4.8 ± 1.8 total authors, with 1.0 ± 0.7 code-contributing authors and 3.8 ± 1.9 non-code-contributing authors. Beyond the author list, papers averaged 0.5 ± 1.8 code-contributing non-authors. Figure 2 details these distributions by domain, article type, and open access status, as well as overall across filtered analysis set 8.\nPerhaps most striking is our finding that 5,694 papers (~28.6% of our sample) have at least one code contributor who was not matched to any article author. Further investigating this subset of papers, we find an average of 1.6 ± 3.0 un-matched code contributors per paper. Next, we constructed a random sample of 200 code-contributing non-authors (see Section 7.4 for complete methodology) in order to better understand code-contributing non-authors. We characterize this subset in three ways: ~39% (n=78) represent true non-authors (individuals who likely should not be matched to an author), ~30.5% (n=61) appear to be missed classifications (individuals who likely should have been matched to authors), and the remaining ~30.5% (n=61) were unclear due to limited profile information 9.\n9 While annotation for the model training and evaluation set was done using primarily simple text information (e.g., usernames, emails, etc.), annotation conducted during the qualitative analysis of code-contributing non-authors included a more in-depth review of public profiles including any linked websites or social media profiles. This was done to gain a true best estimate for the “true”, “missed”, and “unclear” classifications. Additional qualitative error analysis was conducted across the set of 61 likely authors and our findings are available in the appendex (Section 7.4.3).****(Clarify who the next paragraph is describing - is this CC-NA?)\nThe majority of code contributors across all groups made code changes rather than just documentation updates. Among true non-authors, ~77.6% (n=59) contributed code, with the top 25th percentile of these contributors contributing ~10.7% of total repository commits and ~14.4% of absolute code changes. The unclear cases showed substantially higher contribution levels— many were repository owners with extensive engagement. Yet, even among the non-owners, the median contributor accounted for ~34.6% of repository commits and ~12.7% of absolute changes. Due to the limited size of our sample (n=200 code-contributing non-authors), we do not generalize these findings to the entire population but note that they describe the diverse nature of code contribution patterns from potentially unacknowledged contributors.\nThese findings reveal a more complex dynamic between software development and authorship recognition than previously documented. While our finding that each paper averages only a single code-contributing author aligns with previous research showing technical tasks typically fall to first authors (Larivière, Pontille, and Sugimoto 2020), the substantial contributions made by unrecognized contributors suggest systematic gaps in how scientific software development work is credited.\n\n\n\n\n\n\n\n\nFigure 2: Mean of Non-Code-Contributing Authors (NCC-A), Code-Contributing Authors (CC-A), and Code-Contributing Non-Authors (CC-NA) Research Team Members by Domain, Article Type, and Open Access Status. Only includes research teams from article-repository pairs with repositories that have programming language files, a most recent commit no later than 90 days after publication, and excludes research teams in the top 3% of total author sizes.\n\n\n\n\n\nWhen examining these patterns over time and across different team sizes (Figure 3), we found that the number of code-contributing authors and unrecognized contributors has remained relatively stable. This suggests that while the exclusion of code contributors from authorship is not worsening, it represents a persistent feature of scientific software development rather than a historical artifact or transition period in research practices. Similarly, the number of code-contributing non-authors remains constant even as team size grows, indicating that larger research teams do not necessarily adopt more inclusive authorship practices for code contributors despite representing broader collaborative efforts.\n\n\n\n\n\n\n\n\nFigure 3: Average number of contributors per article, by contribution type, along with A) the year the article was published and B) the total number of authors included in the article. Only includes research teams from article-repository pairs with repositories that have programming language files, a most recent commit no later than 90 days after publication, and excludes research teams in the top 3% of total author sizes for publication years with 50 or more articles. Shaded areas show the 95% confidence interval for the mean.\n\n\n\n\n\n\n4.1.1 Modeling Article Citations\nBuilding upon previous work examining the effects of team size and team diversity on scientific impact and software quality (see Section 2), we investigate how the number of code contributors within a research team may be associated with an article’s research impact. We hypothesized that more code contributors might signal greater technical complexity in research, which may be associated with higher citation counts as the community builds upon more technically sophisticated works (H1).Using our filtered dataset of article-repository pairs (Table 5), we conducted multiple generalized linear regression analyses to examine these relationships while controlling for various factors. Each generalized linear regression model included controls for the total number of authors listed on the publication and the number of years since the date of publication (as a decimal). Without additional controls for domain, open access, or article type (Table 10), our analysis revealed a modest positive association between the number of code-contributing authors and article citations, with each code-contributing author associated with, on average, a ~4.2% increase in article citations (p &lt; 0.001).\nWhen controlling for article type (Table 13), we observed divergent patterns between preprints and research articles. For preprints, each code-contributing non-author was associated with a statistically significant ~3.0% decrease in citations (p &lt; 0.005). In contrast, research articles showed more positive associations: we found a significant positive relationship between code-contributing authors and citations (p &lt; 0.001), though we cannot estimate the precise magnitude due to the non-significant main effect in the model. Additionally, each code-contributing non-author was associated with a ~0.1% increase in expected citations for research articles (p &lt; 0.001).\nBased on these findings, we fail to reject our hypothesis (H1) that “the number of individuals contributing code to a publication’s associated repository positively correlates with the article’s citation count.” It is important to note that, the relationship between contributors and citations is statistically significant, but these effects are modest in magnitude, and differ substantially between research articles (positive association) and preprints (negative association for non-author code contributors). These variations suggest that the relationship between code contributions and citation impact is context-dependent and more complex than we originally stated in our hypothesis. We return to this finding in the discussion and limitations sections that follow."
  },
  {
    "objectID": "qss-code-authors.html#characteristics-of-scientific-code-contributors",
    "href": "qss-code-authors.html#characteristics-of-scientific-code-contributors",
    "title": "Code Contribution and Credit in Science",
    "section": "4.2 Characteristics of Scientific Code Contributors",
    "text": "4.2 Characteristics of Scientific Code Contributors\n\n4.2.1 Author Positions of Code Contributing Authors\nBuilding upon previous work examining the relationship between authorship position and research contributions, we investigate how author position may relate to code contribution patterns. We hypothesized that first authors, traditionally contributing the bulk of intellectual and experimental work, are most likely to contribute code to a project (H2a).\nTo analyze these patterns within our previously filtered dataset of article-repository pairs (Table 5), we conducted Chi-square tests of independence between author position and code contribution status. These tests revealed significant associations between author position and likelihood of code contribution overall and when controlling for research domain, article type, and open access status (all p &lt; 0.01), indicating that the proportion of authors contributing code differs significantly based on author position 10. Following these significant associations, we examined the specific proportions across positions (Table 14): 69.8% of first authors contributed code to their projects, compared to only 9.7% of middle authors and 7.6% of last authors. The differences in these proportions remained statistically significant across all tested scenarios, regardless of research domain, article type, or open access status.\n10 Community practices and norms around authorship order vary across disciplines and over time. One particular changing practice is the adoption of shared first authorship, where two or more authors are designated as having contributed equally to the work. However, after all filtering required for analysis was complete, none of the remaining articles included multiple first authors.Based on these findings, we fail to reject our hypothesis (H2a) that “first authors have higher code contribution rates than authors in other positions.” The data demonstrates that the proportion of first authors who contribute code (69.8%) is significantly higher than the proportion of both middle authors (9.7%) and last authors (7.6%). This relationship remains robust and statistically significant across all tested conditions, including variations in research domain, article type, and open access status, indicating a fundamental connection between authorship position and technical contribution in scientific research.\n\n\n4.2.2 Corresponding Status of Code Contributing Authors\nBuilding upon our analysis of author position, we next examine how corresponding author status relates to code contribution patterns. We hypothesized that corresponding authors, who traditionally maintain research artifacts and serve as primary points of contact, would be more likely to contribute code compared to non-corresponding authors (H2b)\nTo analyze these relationships within our filtered dataset of article-repository pairs, we conducted Chi-square tests of independence between corresponding author status and code contribution status. Our analysis revealed patterns contrary to our initial hypothesis. The proportion of code contributors was low among both groups, with only 29.7% of corresponding authors and 20.6% of non-corresponding authors contributing code to their projects. Further examination (Table 15) showed that this pattern holds across nearly all conditions, with only one exception: corresponding authors in closed-access publications showed no significant difference in their proportion of code contributors. However, this was tested with a sample of less than 200 authors.\nBased on these findings, we reject our hypothesis (H2b) that “corresponding authors have higher code contribution rates than non-corresponding authors.” Contrary to our expectations, our analysis revealed that the proportion of code contributors among corresponding authors (29.7%) did not significantly differ from the proportion among non-corresponding authors (20.6%). This pattern of similar proportions remained consistent across most studied conditions, with a single exception in closed-access publications which we believe is due to the relatively small sample size available for testing (n=194).\n\n\n4.2.3 Modeling Author H-Index\nBuilding upon previous work examining career implications for researchers who prioritize software development (see Section 2), we investigated how varying levels of code contribution relate to scholarly impact through h-index metrics. To ensure a robust analysis, we applied several key data filtering steps. We only included researchers with at least three publications in our dataset, removed those with more than three developer account associations, and used each researcher’s most common domain, article type, and author position, with ties broken by the most recent occurrence. We removed h-index outliers by excluding researchers below the bottom 3rd and above the top 97th percentiles. Finally, we removed any author-developer-account pairs with predictive model confidence of less than 0.97. Table 16 summarizes the number of researchers in each coding frequency group, categorized by author position, publication type, and research domain.\nWe categorized researchers’ coding contributions into mutually exclusive groups: non-coders (no code contributions), any coding (code contribution in less than half of article-repository pairs), majority coding (code contribution in at least half, but not all, article-repository pairs), and always coding (code contribution in every article-repository pair).\nFigure 4 shows the distribution of author h-indices across these coding frequency groups, grouped by author position, publication type, and research domain.\n\n\n\n\n\n\n\n\nFigure 4: Distribution of author h-index by coding frequency across three key publication factors. Results are grouped by each author’s most frequent: (1) position in publication bylines (first, middle, or last), (2) publication type (preprint, research article, or software article), and (3) research domain (Social Sciences, Physical Sciences, Health Sciences, or Life Sciences). Within each subplot, h-indices are divided by the author’s coding frequency: ‘none’ (no coding in any of their publications), ‘any’ (coding in at least one but fewer than half of their publications), ‘majority’ (coding in at least half but not all of their publications), and ‘always’ (coding in each of their publications). Authors are only included if they have three or more publications within our dataset and are associated with no more than three developer accounts, with each association having a predicted model confidence of at least 97%.\n\n\n\n\n\nUsing multiple generalized linear regressions, and while controlling for an author’s total number of published works, we find a consistent and statistically significant negative relationship between code contribution frequency and h-index across multiple controls. Our initial analysis, controlled only by an author’s publication count (Table 17) indicates increasingly adverse h-index effects as researcher coding frequency increases. Compared to non-coding authors, researchers were associated with progressively lower h-indices: occasional code contributors showed a ~27.3% lower h-index (p &lt; 0.001), majority code contributors demonstrated a ~53.5% lower h-index (p &lt; 0.001), and always coding authors exhibited a ~62.1% lower h-index (p &lt; 0.001).\nWhen controlling for author position (Table 18), we found a general pattern of reduced h-indices with increased code contribution, with one notable exception. Occasional coding first authors were associated with a ~14.9% higher h-index (p &lt; 0.001), while always coding first authors saw a ~21.6% reduction compared to non-coding first authors (p &lt; 0.001). For middle and last authors, the pattern was more consistently negative. Middle authors who occasionally coded showed a ~26.6% lower h-index (p &lt; 0.001), and those who always coded demonstrated a ~52.9% lower h-index (p &lt; 0.001). Similarly, last authors who occasionally coded experienced a ~13.1% lower h-index (p &lt; 0.001), with always coding authors showing a ~45.7% lower h-index (p &lt; 0.001).\nWhen controlling for research domain (Table 19), majority coding scientists showed significant h-index reductions across all domains. Health sciences researchers saw the most dramatic reduction at ~76.5% (p &lt; 0.001), followed by physical sciences at ~52.6% (p &lt; 0.001), social sciences at ~51.4% (p &lt; 0.001), and life sciences at ~47.1% (p &lt; 0.001).\nAnalyzing by common article type (Table 20) revealed similar patterns. For authors primarily publishing preprints, the h-index reductions were substantial: ~25.6% for occasional coding, ~53.5% for majority coding, and ~62.9% for always coding authors. Authors primarily publishing software articles showed slightly better but still significant reductions: ~33.1% for majority coding and ~33.0% for always coding authors.\nBased on these findings, we fail to reject our hypothesis (H3) that “the frequency with which individual researchers contribute code to their research projects is negatively correlated with their h-index.” Our analysis demonstrates a clear and statistically significant negative relationship between code contribution frequency and scholarly impact as measured by the researcher’s h-index. This relationship was robust across multiple analytical controls, including author position, research domain, and article type. These results are particularly striking because our models include publication count as an input feature, suggesting that these h-index reductions persist even when accounting for total research output."
  },
  {
    "objectID": "qss-code-authors.html#limitations",
    "href": "qss-code-authors.html#limitations",
    "title": "Code Contribution and Credit in Science",
    "section": "5.1 Limitations",
    "text": "5.1 Limitations\nOur data collection approach introduces several methodological constraints to consider when interpreting these results. By focusing exclusively on GitHub repositories, we likely miss contributions stored on alternative platforms such as GitLab, Bitbucket, or institutional repositories, potentially skewing our understanding of contribution patterns. As Trujillo, Hébert-Dufresne, and Bagrow (2022), Cao et al. (2023), and Escamilla et al. (2022) have all noted, while GitHub is the predominate host of scientific software, significant portions of research code exist on other platforms. Additionally, our reliance on public repositories means we cannot account for private repositories or code that were never publicly shared, potentially underrepresenting sensitive research areas or proprietary methods.\nFurther, while our data processing workflow began with ~60,000 possible article-repository pairs from PLOS, ~3,000 from JOSS, ~700 from SoftwareX, and ~180,000 from Papers with Code for a possible total of ~243,700 11, rs-graph-v1 contained a total of 163,292 article-repository pairs. Many of the possible article-repository pairs were filtered out due to the linked repository not being accessible, or the bibliometric metadata not being available.\n11 Article-repository pair counts are approximate because there are no snapshots of these databases at a single point in time. The estimates are based on counts from each data source taken in October 2025.Our labeling of article types (software article, research article, preprint) was based on the data source (PLOS, JOSS, SoftwareX, Papers with Code) and in the case of Papers with Code articles, our DOI resolution process and the document type available from OpenAlex. This approach may misclassify certain articles, especially those from Papers with Code (arXiv). One potential alternative approach would involve classification of the repository itself following the recommendations of Hasselbring et al. (2025) in breaking down repositories by their role in research (e.g., “Modeling, Simuluation, and Data Analysis”, “Technology Research Software”, and “Research Infrastructure Software”). This classification would allow us to investigate not only the differences of “software papers” vs “research articles” and “preprints” (which we believe would both typically be paired with “Modeling, Simulation, and Data Analysis” repositories), but the purpose of the code as it relates to the research. However, there is currently no established automated method for performing this classification at scale.\nSimilarly, our simplification of author positions, domains, and article types to each author’s “most common” (most frequent, with ties broken by most recent) introduces potential biases. This reduction may obscure the diversity of an author’s contributions across different contexts, particularly for interdisciplinary researchers or those with varied roles in different projects. Further, these labels are created from metadata for articles only within our dataset. That is, even though a researcher may have dozens of articles, their “most common” author position, domain, and article type was determined with data for article-repository pairs. This inherently biases the dataset towards research teams who, as a collective, frequently create and share software and code as a part of their research process. While this approach was necessary for managing the complexity of our analysis, it may not fully capture the nuances of individual research careers.\nOur predictive modeling approach for matching authors with developer accounts presents additional limitations. The model’s performance can be affected by shorter names where less textual information is available for matching, potentially creating biases against researchers from cultures with shorter naming conventions. Organization accounts used for project management pose particular challenges for accurate matching, and while we implemented filtering mechanisms to minimize their impact, some misclassifications may persist. Furthermore, our approach may not capture all code contributors if multiple individuals developed code but only one uploaded it to a repository—creating attribution artifacts that may systematically underrepresent specific contributors, particularly junior researchers or technical staff who may not have direct repository access. However, as discussed further in the Appendix (Section 7.1.3), our dataset is relatively diverse, with the median preprint-repository pair having a commit duration (the number of days between the repository’s creation and the repository’s most recent commit) of 53 days, research article-repository pairs having a median commit duration of 114 days, and software article-repository pairs having a median commit duration of 282 days. This diversity in commit durations suggests that our dataset contains a range of development practices, including both some “code dumps,” as well as year (and multi-year) long projects.\nOur analytical approach required substantial data filtering to ensure reliable results, introducing potential selection biases in our sample. By focusing on article-repository pairs with commit activity no later than 90 days past the date of article publication and at least three authors and less than 11 authors, we may have systematically excluded certain types of research projects, particularly those with extended development timelines or extensive collaborations. Our categorization of coding status (non-coder, any coding, majority coding, always coding) necessarily simplifies complex contribution patterns. It does not account for code contributions’ quality, complexity, or significance. Additionally, our reliance on OpenAlex metadata introduces certain limitations to our analysis. While OpenAlex provides good overall coverage, it lags behind proprietary databases in indexing references and citations. The lag in OpenAlex data may affect our citation-based analyses and the completeness of author metadata used in our study (Alperin et al. 2024)."
  },
  {
    "objectID": "qss-code-authors.html#future-work",
    "href": "qss-code-authors.html#future-work",
    "title": "Code Contribution and Credit in Science",
    "section": "5.2 Future Work",
    "text": "5.2 Future Work\nFuture technical improvements may enhance our understanding of the relationship between software development and scientific recognition systems. Expanding analysis beyond GitHub to include other code hosting platforms would provide a more comprehensive understanding of scientific software development practices across domains and institutional contexts. More sophisticated entity-matching techniques could improve author-developer account identification, particularly for cases with limited information or common names. Developing more nuanced measures and classifications of code contribution type, quality, and significance beyond binary contribution identification would better capture the true impact of technical contributions to research (as we have started to do in Section 7.1.2.2). These methodological advances would enable more precise tracking of how code contributions translate—or fail to translate—into formal scientific recognition, providing clearer evidence for policy interventions.\nOur findings point to several directions for future research on the changing nature of scientific labor and recognition. Longitudinal studies tracking how code contribution patterns affect career trajectories would provide valuable insights into the long-term impacts of the observed h-index disparities and whether these effects vary across career stages. Comparative analyses across different scientific domains could reveal discipline-specific norms and practices around software recognition, potentially identifying models that more equitably credit technical contributions. Qualitative studies examining how research teams make authorship decisions regarding code contributors would complement our quantitative findings by illuminating the social and organizational factors influencing recognition practices. Additionally, to better understand corresponding authors’ role in maintaining research artifacts, future work could remove the 90-day post-publication commit activity filter to examine long-term sustainability actions. However, this approach must address introducing contributors unrelated to the original paper.\nDespite their growing importance, the persistent underrecognition of software contributions suggests a need for structural interventions in how we conceptualize and reward scientific work. Building upon efforts like CRediT (Brand et al. 2015), future work should investigate potential policy changes to better align institutional incentives with the diverse spectrum of contributions that drive modern scientific progress. However, as the example of CRediT demonstrates, even well-intentioned taxonomies may reproduce existing hierarchies or create new forms of inequality if they fail to address underlying power dynamics in scientific communities. The challenge is not merely technical but social: creating recognition systems that simultaneously support innovation, ensure appropriate credit, maintain research integrity, and foster equitable participation in an increasingly computational scientific enterprise."
  },
  {
    "objectID": "qss-code-authors.html#extended-data-and-methods",
    "href": "qss-code-authors.html#extended-data-and-methods",
    "title": "Code Contribution and Credit in Science",
    "section": "7.1 Extended Data and Methods",
    "text": "7.1 Extended Data and Methods\n\n7.1.1 Building a Dataset of Linked Scientific Articles and Code Repositories\nThe increasing emphasis on research transparency has led many journals and platforms to require or recommend code and data sharing (Stodden, Guo, and Ma 2013; Sharma et al. 2024), creating traceable links between publications and code. These explicit links enable systematic study of both article-repository and author-developer account relationships (Hata et al. 2021; Kelley and Garijo 2021; Stankovski and Garijo 2024; Milewicz, Pinto, and Rodeghero 2019).\nOur dataset collection process leveraged four sources of linked scientific articles and code repositories, each with specific mechanisms for establishing these connections:\n\nPublic Library of Science (PLOS): We extracted repository links from PLOS articles’ mandatory data and code availability statements.\nJournal of Open Source Software (JOSS): JOSS requires explicit code repository submission and review as a core part of its publication process.\nSoftwareX: Similar to JOSS, SoftwareX mandates code repositories as a publication requirement.\nPapers with Code: This platform directly connects machine learning preprints with their implementations. We focus solely on the “official” article-repository relationships rather than the “unverified” or “unofficial” links.\n\nWe enriched these article-repository pairs with metadata from multiple sources to create a comprehensive and analyzable dataset. We utilized the Semantic Scholar API for DOI resolution to ensure we found the latest version of each article. This resolution step was particularly important when working with preprints, as journals may have published these papers since their inclusion in the Papers with Code dataset. Using Semantic Scholar, we successfully resolved ~56.3% (n=78,021) of all DOIs within our dataset12.\n12 Broken out by dataset source, we resolved ~2.1% (n=125) of all PLOS DOIs, ~4.0% (n=93) of all JOSS DOIs, ~0.0% (n=0) of all SoftwareX DOIs, and ~49.2% (n=63,817) of all Papers with Code (arXiv) DOIs.We then utilized the OpenAlex API to gather detailed publication metadata, including:\n\nPublication characteristics (open access status, domain, publication date)\nAuthor details (name, author position, corresponding author status)\nArticle- and individual-level metrics (citation counts, FWCI, h-index)\n\nSimilarly, the GitHub API provided comprehensive information for source code repositories:\n\nRepository metadata (name, description, programming languages, creation date)\nContributor details (username, display name, email)\nRepository-level metrics (star count, fork count, issue count)\n\n\n\n7.1.2 Developing a Predictive Model for Author-Developer Account Matching\n\n7.1.2.1 Annotated Dataset Creation\nCreating an accurate author-developer account matching model required high quality, labeled training data that reflects real-world identity-matching challenges. Exact matching on names or emails proved insufficient due to variations in formatting (e.g., “J. Doe” vs. “Jane Doe”), use of institutional versus personal email addresses, and incomplete information. However, author and developer account information often contain sufficient similarities for probabilistic matching, such as when author “Jane Doe” corresponds to username “jdoe” or “janedoe123.”\nTo efficiently build our training and evaluation dataset, we used JOSS articles as we believed they typically feature higher author-developer-account overlap, increasing positive match density. Our dataset creation process followed these steps:\n\nWe generated semantic embeddings for each developer account and author name using the multi-qa-MiniLM-L6-cos-v1 model from the Sentence Transformers Python library (Reimers and Gurevych 2019).\nWe calculated cosine similarity between all potential author-developer-account pairs for each article-repository pair.\nWe selected the three most similar authors for each developer account for annotation efficiency.\n\nFrom these generated author-developer-account pairs, we randomly selected 3,000 for classification by two independent annotators as either matches or non-matches, resolving disagreements through discussion and verification. The resulting dataset contains 451 (~15.0%) positive matches and 2,548 (~85.0%) negative matches, comprising 2,027 unique authors and 2,733 unique developer accounts.\nOur collected data for annotation confirmed that exact matching would be insufficient—only 2,191 (~80.2%) of developer accounts had associated display names and just 839 (~30.7%) had associated email addresses.\n\n\n7.1.2.2 Training and Evaluation\nOur training and evaluation methodology began with careful dataset preparation to prevent data leakage between training and test sets. To ensure complete separation of authors and developers, we randomly selected 10% of unique authors and 10% of unique developers, designating any pairs containing these selected entities for the test set. This entity-based splitting strategy resulted in 2,442 (~81.4%) pairs for training and 557 (~18.6%) pairs for testing.\nFor our predictive model, we evaluated three transformer-based architectures that have demonstrated strong performance in entity-matching tasks:\n\nDeBERTa-v3-base (He, Gao, and Chen 2021; He et al. 2021)\nmBERT (bert-base-multilingual-cased) (Devlin et al. 2018)\nDistilBERT (Sanh et al. 2019)\n\nWe systematically evaluated these base models across different combinations of developer-account features, ranging from using only the username to incorporating complete profile information (username, display name, and email address). We fine-tuned all models using the Adam optimizer with a linear learning rate of 1e-5 for training and a batch size of 8 for training and evaluation. Given the size of our dataset and the binary nature of our classification task, models were trained for a single epoch to prevent overfitting.\nWe evaluated model performance using precision, recall, and F1-score. This evaluation framework allowed us to directly compare model architectures and feature combinations while accounting for the balance between precision and recall in identifying correct matches.\nOur comprehensive model evaluation revealed that fine-tuning DeBERTa-v3-base (He, Gao, and Chen 2021) with developer username and display name as input features produces optimal performance for author-developer matching. This model configuration achieved a binary F1 score of 0.944, with an accuracy of 0.984, precision of 0.938, and recall of 0.95. Table 2 presents a complete comparison of model architectures and feature combinations.\n\n\n\n\nTable 2: Comparison of Models for Author-Developer-Account Matching\n\n\n\n\n\n\n\n\n\n\nOptional Feats.\nModel\nAccuracy\nPrecision\nRecall\nF1\n\n\n\n\n0\nname\ndeberta\n0.984\n0.938\n0.950\n0.944\n\n\n1\nname, email\nbert-multilingual\n0.984\n0.938\n0.950\n0.944\n\n\n2\nname, email\ndeberta\n0.982\n0.907\n0.975\n0.940\n\n\n3\nname\nbert-multilingual\n0.982\n0.938\n0.938\n0.938\n\n\n4\nname\ndistilbert\n0.978\n0.936\n0.912\n0.924\n\n\n5\nname, email\ndistilbert\n0.978\n0.936\n0.912\n0.924\n\n\n6\nemail\ndeberta\n0.957\n0.859\n0.838\n0.848\n\n\n7\nemail\nbert-multilingual\n0.950\n0.894\n0.738\n0.808\n\n\n8\nn/a\ndeberta\n0.946\n0.847\n0.762\n0.803\n\n\n9\nn/a\nbert-multilingual\n0.941\n0.862\n0.700\n0.772\n\n\n10\nn/a\ndistilbert\n0.856\n0.000\n0.000\n0.000\n\n\n11\nemail\ndistilbert\n0.856\n0.000\n0.000\n0.000\n\n\n\n\n\n\n\n\n\n\nAnalysis of each model’s performance revealed that including developer display names had the most significant positive impact on model performance compared to username alone. We also observed that mBERT’s performance was comparable to DeBERTa’s while using the developer email address as an additional input feature. However, we selected the DeBERTa configuration as it consistently performed well across various feature combinations.\nTo facilitate the reuse of our work, we have made our trained model and supporting code publicly available. Complete fine-tuning, evaluation, and inference code is available as the Python package: sci-soft-models, and the fine-tuned model has been released on HuggingFace (evamxb/dev-author-em-clf).\n\n\n7.1.2.3 Evaluation of Model Performance on Non-JOSS Author-Developer Pairs\nTo assess our model’s generalizability beyond the JOSS dataset used for training, we conducted an additional evaluation using author-developer-account pairs from the PLOS, SoftwareX, and Papers with Code datasets. We created a dataset of all combinations of possible author-developer pairs from 20 article-repository pairs from each dataset. This resulted in 535 possible author-developer pairs for annotation across the 60 total article-repository pairs. Two independent annotators classified each of the possible author-developer pairs as either matches or non-matches. This annotation process mirrors how our complete dataset was constructed by using the trained model to predict matches from all possible author-developer pairs for a given article-repository pair. The two annotators achieved a Cohen’s kappa of 0.948, or “almost perfect” agreement (Cohen 1960; McHugh 2012). Annotators further discussed and resolved all disagreements.\nThe trained author-developer matching model was then applied to this new dataset, achieving an overall binary-F1 score of 0.89, precision of 0.92 and recall of 0.87 (positive=“match”). The overall macro-F1 score was 0.94, with a precision of 0.95 and recall of 0.93. Per-dataset performance is presented in Table 3. Across each of the non-JOSS datasets, the model demonstrated strong performance, with binary-F1 scores ranging from 0.88 to 0.90, and acheiving 0.94 for all macro-F1 scores.\n\n\n\nTable 3: Per-dataset performance of the author-developer-account matching model on non-JOSS datasets.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndataset\nbinary-F1\nbinary-Precision\nbinary-Recall\nmacro-F1\nmacro-Precision\nmacro-Recall\n\n\n\n\nPLOS\n0.88\n0.79\n1.00\n0.94\n0.89\n0.99\n\n\nSoftwareX\n0.90\n0.96\n0.85\n0.94\n0.97\n0.92\n\n\nPapers With Code\n0.89\n1.00\n0.81\n0.94\n0.98\n0.90\n\n\n\n\n\n\n\n\n7.1.2.4 Model Limitations\nWhile our model demonstrates strong performance, we acknowledge certain limitations in our approach:\n\nShort name sensitivity: Shorter names (both usernames and display names) can affect the model’s performance, as less textual information is available for matching.\nOrganization accounts: Research lab accounts used for project management present a potential challenge for accurate matching, as they do not correspond to individual authors. However, our filtering mechanisms applied before analysis help minimize their impact on modeling.\n\nAdditional limitations are discussed in a qualitative error analysis conducted as part of our evaluation of the code-contributing non-author sub-sample in @#sec-appendix-cc-na-error-analysis.\n\n\n\n7.1.3 Dataset Characteristics and Repository Types\nOur compiled dataset appears to contain a mix of repository types, varying from analysis script repositories to software tools and likely some “code dumps” (where code is copied to a new repository immediately before publication). This diversity is reflected in the commit duration patterns across different publication types. The median commit duration for repositories in our analysis is:\n\n53 days for preprints\n114 days for research articles\n282 days for software articles\n\nComplete statistics on commit durations, including count, mean, and quantile details, are available in Table 4.\n\n\n\n\nTable 4: Commit duration (in days) distributions for different publication types. Only includes article-repository pairs with a most recent commit no later than 90 days after publication and excludes publications from research teams in the top 3% of total author sizes.\n\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n10%\n25%\n50%\n75%\n90%\nmax\n\n\narticle_type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npreprint\n2683\n110\n182\n-1520\n0\n6\n53\n138\n285\n2091\n\n\nresearch article\n17017\n193\n253\n-931\n0\n19\n114\n269\n487\n3176\n\n\nsoftware article\n200\n394\n475\n-1\n0\n50\n282\n536\n951\n3007"
  },
  {
    "objectID": "qss-code-authors.html#distributions-of-author-developer-account-prediction-confidence",
    "href": "qss-code-authors.html#distributions-of-author-developer-account-prediction-confidence",
    "title": "Code Contribution and Credit in Science",
    "section": "7.2 Distributions of Author-Developer-Account Prediction Confidence",
    "text": "7.2 Distributions of Author-Developer-Account Prediction Confidence\n\n\n\n\n\n\n\n\nFigure 5: Distribution of author-developer-account prediction confidence scores. The plot on the left shows the distribution of all prediction confidence scores. The plot on the right shows the distribution of prediction confidence scores for author-developer-account pairs with a confidence score greater than or equal to 0.97.\n\n\n\n\n\nThresholding the predictive model confidence at 0.97 resulted in a ~3.2% (n=2,911) reduction in the number of author-developer-account pairs (from an unfiltered total of 90,086 author-developer-account pairs). This threshold was chosen to ensure a high level of confidence in the matches while retaining a large number of pairs for analysis."
  },
  {
    "objectID": "qss-code-authors.html#filtered-dataset-description-for-article-citation-author-position-and-author-correspondence-analysis",
    "href": "qss-code-authors.html#filtered-dataset-description-for-article-citation-author-position-and-author-correspondence-analysis",
    "title": "Code Contribution and Credit in Science",
    "section": "7.3 Filtered Dataset Description for Article-Citation, Author-Position, and Author-Correspondence Analysis",
    "text": "7.3 Filtered Dataset Description for Article-Citation, Author-Position, and Author-Correspondence Analysis\n\n\n\n\nTable 5: Counts of article-repository pairs, authors, and developers for research teams. Only includes research teams from article-repository pairs with a most recent commit no later than 90 days after publication and excludes research teams in the top 3% of total author sizes.\n\n\n\n\n\n\nCategory\nSubset\nArticle-Repository Pairs\nAuthors\nDevelopers\n\n\nBy Domain\nHealth Sciences\n931\n4,927\n1,188\n\n\nLife Sciences\n1,679\n7,877\n2,252\n\n\nPhysical Sciences\n16,165\n55,164\n20,898\n\n\nSocial Sciences\n1,125\n4,663\n1,567\n\n\nBy Document Type\npreprint\n2,683\n11,327\n4,190\n\n\nresearch article\n17,017\n61,279\n21,482\n\n\nsoftware article\n200\n905\n449\n\n\nBy Access Status\nClosed\n1,070\n5,054\n1,679\n\n\nOpen\n18,830\n66,677\n24,026\n\n\nBy Data Source\njoss\n77\n353\n246\n\n\nplos\n2,109\n10,345\n2,729\n\n\npwc\n17,591\n59,261\n22,313\n\n\nsoftwarex\n123\n554\n204\n\n\nTotal\n\n19,900\n69,808\n25,358\n\n\n\n\n\n\n\n\n\n7.3.1 Distributions of Team Composition\nTable 6 provides detailed statistics on the composition of research teams across different domains, article types, and open access statuses.\n\n\n\n\nTable 6: Mean and Standard Deviation of Non-Code-Contributing Authors (NCC-A), Code-Contributing Authors (CC-A), and Code-Contributing Non-Authors (CC-NA) Research Team Members by Domain, Article Type, and Open Access Status. Only includes research teams from article-repository pairs with repositories that have programming language files, a most recent commit no later than 90 days after publication, and excludes research teams in the top 3% of total author sizes.\n\n\n\n\n\n\nControl\nSubset\nTotal Authors\nNCC-A\nCC-A\nCC-NA\n\n\nOA Status\nClosed\n5.1 ± 1.8\n4.0 ± 1.9\n1.1 ± 0.7\n0.6 ± 2.1\n\n\nOpen\n4.8 ± 1.8\n3.8 ± 1.9\n1.0 ± 0.7\n0.5 ± 1.8\n\n\nDomain\nHealth Sciences\n5.8 ± 2.2\n4.8 ± 2.3\n1.0 ± 0.6\n0.4 ± 1.3\n\n\nLife Sciences\n5.0 ± 2.0\n4.0 ± 2.1\n1.0 ± 0.7\n0.4 ± 1.2\n\n\nPhysical Sciences\n4.8 ± 1.7\n3.7 ± 1.8\n1.0 ± 0.7\n0.5 ± 1.9\n\n\nSocial Sciences\n4.5 ± 1.7\n3.4 ± 1.7\n1.1 ± 0.7\n0.3 ± 1.2\n\n\nArticle Type\npreprint\n4.8 ± 1.7\n3.7 ± 1.8\n1.0 ± 0.7\n0.6 ± 2.3\n\n\nresearch article\n4.8 ± 1.8\n3.8 ± 1.9\n1.0 ± 0.7\n0.4 ± 1.7\n\n\nsoftware article\n4.6 ± 1.7\n3.1 ± 1.8\n1.5 ± 1.3\n0.9 ± 1.1\n\n\nOverall\n\n4.8 ± 1.8\n3.8 ± 1.9\n1.0 ± 0.7\n0.5 ± 1.8"
  },
  {
    "objectID": "qss-code-authors.html#sec-appendix-additional-cc-na-analysis",
    "href": "qss-code-authors.html#sec-appendix-additional-cc-na-analysis",
    "title": "Code Contribution and Credit in Science",
    "section": "7.4 Additional Analysis of Code-Contributing Non-Authors",
    "text": "7.4 Additional Analysis of Code-Contributing Non-Authors\n\n7.4.1 Sample Construction and Labeling\nTo better understand the nature and extent of contributions made by code-contributing non-authors in our dataset, we conducted a detailed analysis using a random sample of 200 individuals from our filtered dataset used in other analyses (Table 5). Our analysis combined qualitative labeling of contribution types with quantitative analysis of commit activity, additions, and deletions made by these contributors to their respective article-repository pairs.\n\n7.4.1.1 Annotation Process\nTwo independent annotators labeled each of the 200 code-contributing non-authors across three dimensions after completing two rounds of trial labeling on 20 cases to establish agreement. The final labeling criteria were:\nContribution Type:\n\n“docs”: Contributors who only modified documentation files (README, LICENSE, etc.) or made changes limited to code comments.\n“code”: Contributors who modified actual code files (.py, .R, .js, etc.) with substantive changes or modified code support files (requirements.txt, pyproject.toml, package.json, etc.). Contributors who made code and documentation changes were labeled “code.”\n“other”: Contributors whose changes did not fit the above categories, including those who committed to upstream forks or merged code without authoring it.\n\nAuthor Matching Assessment:\n\n“yes”: Contributors who should have been matched to an author (missed classification).\n“no”: Contributors correctly classified as non-authors.\n“unclear”: Cases with insufficient information for determination.\n\nBot Account Detection:\n\n“yes”: Automated accounts (GitHub Actions, Dependabot, etc.).\n“no”: Human users.\n\nAfter establishing near perfect agreement for contribution type (κ=0.89), and perfect agreement for author matching assessment and bot account detection (κ=1.0), each annotator independently labeled 90 contributors— the final sample of 200 created by combining both sets plus the 20 cases used for criteria development.\n\n\n7.4.1.2 Quantitative Metrics\nFor each code-contributing non-author, we collected commit activity data using the GitHub API contributor stats endpoint:\n\nNumber of Commits: The total number of commits made by the code contributor to the article-repository pair.\nNumber of Additions: The total number of lines of code added by the code contributor to the article-repository pair.\nNumber of Deletions: The total number of lines of code deleted by the code contributor to the article-repository pair.\nNumber of Total Repository Commits: The total number of commits made to the article-repository pair, regardless of code contributor.\nNumber of Total Repository Additions: The number of lines of code added to the article-repository pair, regardless of code contributor.\nNumber of Total Repository Deletions: The total number of lines of code deleted from the article-repository pair, regardless of code contributor.\n\nWe additionally calculated the absolute change for each code contributor as the sum of additions and deletions, which provides a measure of the total impact of their contributions. Further, we normalized these metrics by the total number of commits, additions, deletions, and absolute changes made to the article-repository pair, regardless of code contributor. This normalization allows us to compare the relative contribution of each code-contributing non-author to the overall amount of changes to the repository.\n\n\n\n7.4.2 Results\nWe find that ~39% (n=78) of code-contributing non-authors were correctly classified as non-authors, ~30.5% (n=61) were unclear due to insufficient profile information, and ~30.5% (n=61) appeared to be missed classifications that should have been matched to authors. Only two accounts (~1%) were identified as bot accounts.\nWhen broken out by contribution type, we find that:\n\n“true non-authors” (n=78): 59 contributed code, 13 contributed documentation, and 4 contributed some other type of change\n“missed classifications” (n=61): 49 contributed code, 12 contributed documentation, and 0 contributed some other type of change\n“unclear” (n=61): 50 contributed code, 8 contributed documentation, and 3 contributed some other type of change\n\nTable 7 and Table 8 present commit statistics for true non-authors and unclear cases, respectively. Among true non-authors making code contributions, the top quartile (75th percentile and above) contributed ~10.7% of total repository commits and ~14.4% of absolute changes (additions + deletions). The unclear cases showed substantially higher contribution levels. Code contributors in this group comprised ~50.5% of total repository commits and ~41.7% of repository absolute changes, even at the 25th percentile.\n\n\n\n\nTable 7: Commit statistics for code-contributing non-authors labeled as true non-authors. Statistics are calculated as the proportion of commits, additions, deletions, and absolute changes made by the code-contributing non-author to the total commits, additions, deletions, and absolute changes made to the article-repository pair, regardless of code-contributor.\n\n\n\n\n\n\n\n\n\n\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\ncommit_stats\n0.178\n0.307\n0.001\n0.007\n0.029\n0.107\n1.0\n\n\naddition_stats\n0.227\n0.380\n0.000\n0.001\n0.007\n0.192\n1.0\n\n\ndeletion_stats\n0.193\n0.358\n0.000\n0.000\n0.006\n0.149\n1.0\n\n\nabs_stats\n0.222\n0.379\n0.000\n0.001\n0.010\n0.144\n1.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 8: Commit statistics for code-contributing non-authors labeled as unclear. Statistics are calculated as the proportion of commits, additions, deletions, and absolute changes made by the code-contributing non-author to the total commits, additions, deletions, and absolute changes made to the article-repository pair, regardless of code-contributor.\n\n\n\n\n\n\n\n\n\n\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\ncommit_stats\n0.747\n0.366\n0.004\n0.505\n1.0\n1.0\n1.0\n\n\naddition_stats\n0.722\n0.420\n0.000\n0.310\n1.0\n1.0\n1.0\n\n\ndeletion_stats\n0.737\n0.417\n0.000\n0.722\n1.0\n1.0\n1.0\n\n\nabs_stats\n0.733\n0.404\n0.000\n0.417\n1.0\n1.0\n1.0\n\n\n\n\n\n\n\n\n\n\nWe observed a notable pattern where very few true non-authors (n=4) were repository owners, while ~49.2% of unclear cases (n=30) owned the repositories they contributed to. This suggests that many unclear contributors were likely primary code authors who could not be matched due to limited profile information. When excluding repository owners from the unclear group (Table 9), the median contribution drops to ~34.6% of total commits and ~12.7% of absolute changes, though this still represents substantial technical involvement.\n\n\n\n\nTable 9: Commit statistics for code-contributing non-authors labeled as unclear, excluding repository owners. Statistics are calculated as the proportion of commits, additions, deletions, and absolute changes made by the code-contributing non-author to the total commits, additions, deletions, and absolute changes made to the article-repository pair, regardless of code-contributor.\n\n\n\n\n\n\n\n\n\n\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\ncommit_stats\n0.454\n0.399\n0.004\n0.041\n0.346\n0.841\n1.0\n\n\naddition_stats\n0.380\n0.443\n0.000\n0.016\n0.094\n0.917\n1.0\n\n\ndeletion_stats\n0.486\n0.492\n0.000\n0.003\n0.431\n0.999\n1.0\n\n\nabs_stats\n0.392\n0.440\n0.000\n0.011\n0.127\n0.919\n1.0\n\n\n\n\n\n\n\n\n\n\nOur analysis provides evidence that code-contributing non-authors represent a heterogeneous group with varying contribution levels. While defining “substantial” contribution worthy of authorship remains challenging, our findings reveal a clear mix of legitimate non-authors and potentially missed classifications, with both groups often contributing meaningful portions of repository commits and code changes.\nOur sample size of 200 limits generalizability to the full population of code-contributing non-authors. Additionally, the manual annotation process introduces potential subjectivity despite our established criteria, and our reliance on publicly available GitHub profiles may systematically underestimate contributions from developers with minimal profile information.\n\n\n7.4.3 Qualitative Error Analysis of Missed Classifications\nTo better understand why certain code-contributing non-authors were missed classifications, we conducted a qualitative error analysis of the 61 contributors labeled as such. We identified several common themes:\n\nLimited Information from Text Alone: The original dataset for model training and evaluation was constructed using only text-based features from author names and developer information. However, for this extended examination, annotators utilized the full code-contributor profile, including linked websites or linked ORCID profiles. This was done because we wanted to understand the nature of missed classifications (with more time and information to make a classification) rather than strictly replicating the model’s text-only approach. From text alone, many of these missed classifications would have been very challenging to identify. This highlights a limitation in our current model, and a potential area for future work, such as incorporating details from linked websites or other contextual information to improve matching performance.\nName Variations and Cultural Differences: The model performed better with Anglosaxon names, while names from other cultures were more likely to be missed. This suggests possible bias in the training data and a clear area for future work.\nAdditional Unrelated Text in Names: When usernames or display names contained longer phrases or unrelated words, the model tended to classify them as no-match, even if there were strong indicators of a match. For example, a username such as “awesome_computational_biologist_john_d” paired with an author name “John Doe” might be missed due to the additional text in the username.\nSignificant Differences Between Username and Author Name: The model struggled when there were substantial differences between the username and author name, such as when an individual provides a chosen name in their GitHub profile that differed significantly from their authorship name. Most commonly this occurred when an individual used a chosen “English” name in their GitHub profile that was very different from their authorship name.\n\nThese themes highlight areas for potential improvement in the model, such as incorporating more diverse training data and exploring additional features that could capture cultural name variations and contextual information."
  },
  {
    "objectID": "qss-code-authors.html#article-citation-linear-model-results",
    "href": "qss-code-authors.html#article-citation-linear-model-results",
    "title": "Code Contribution and Credit in Science",
    "section": "7.5 Article Citation Linear Model Results",
    "text": "7.5 Article Citation Linear Model Results\n\n\n\n\nTable 10: Article citations by code contributorship of the research team. Generalized linear model fit with negative binomial distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n19303\n\n\nModel:\nGLM\nDf Residuals:\n19298\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n4\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-66676.\n\n\nDate:\nFri, 17 Oct 2025\nDeviance:\n19541.\n\n\nTime:\n18:20:14\nPearson chi2:\n2.98e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.2879\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.9530\n0.028\n33.695\n0.000\n0.898\n1.008\n\n\nTotal Authors\n0.0764\n0.004\n17.815\n0.000\n0.068\n0.085\n\n\nCode-Contrib. Authors\n0.0407\n0.011\n3.686\n0.000\n0.019\n0.062\n\n\nCode-Contrib. Non-Authors\n-0.0022\n0.004\n-0.507\n0.612\n-0.011\n0.006\n\n\nYears Since Publication\n0.3954\n0.004\n90.744\n0.000\n0.387\n0.404\n\n\n\n\n\n\n\n\n\n\n\n\nTable 11: Article citations by code contributorship of the research team controlled by open access status. Generalized linear model fit with negative binomial distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n19303\n\n\nModel:\nGLM\nDf Residuals:\n19295\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n7\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-66612.\n\n\nDate:\nFri, 17 Oct 2025\nDeviance:\n19413.\n\n\nTime:\n18:20:14\nPearson chi2:\n2.95e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.2926\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.6503\n0.065\n9.953\n0.000\n0.522\n0.778\n\n\nTotal Authors\n0.0776\n0.004\n18.076\n0.000\n0.069\n0.086\n\n\nCode-Contrib. Authors\n-0.0337\n0.048\n-0.699\n0.484\n-0.128\n0.061\n\n\nCode-Contrib. Non-Authors\n0.0122\n0.016\n0.766\n0.444\n-0.019\n0.043\n\n\nYears Since Publication\n0.3855\n0.004\n87.024\n0.000\n0.377\n0.394\n\n\nIs Open Access\n0.3386\n0.063\n5.337\n0.000\n0.214\n0.463\n\n\nCode-Contrib. Authors × Is Open Access\n0.0773\n0.049\n1.564\n0.118\n-0.020\n0.174\n\n\nCode-Contrib. Non-Authors × Is Open Access\n-0.0141\n0.017\n-0.853\n0.393\n-0.046\n0.018\n\n\n\n\n\n\n\n\n\n\n\n\nTable 12: Article citations by code contributorship of the research team controlled by domain. Generalized linear model fit with negative binomial distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n19303\n\n\nModel:\nGLM\nDf Residuals:\n19289\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n13\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-66599.\n\n\nDate:\nFri, 17 Oct 2025\nDeviance:\n19388.\n\n\nTime:\n18:20:14\nPearson chi2:\n2.95e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.2936\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.8736\n0.075\n11.698\n0.000\n0.727\n1.020\n\n\nTotal Authors\n0.0775\n0.004\n17.866\n0.000\n0.069\n0.086\n\n\nCode-Contrib. Authors\n-0.0030\n0.058\n-0.052\n0.959\n-0.117\n0.111\n\n\nCode-Contrib. Non-Authors\n0.0185\n0.027\n0.681\n0.496\n-0.035\n0.072\n\n\nYears Since Publication\n0.4007\n0.004\n91.040\n0.000\n0.392\n0.409\n\n\nDomain Life Sciences\n-0.2228\n0.084\n-2.648\n0.008\n-0.388\n-0.058\n\n\nDomain Physical Sciences\n0.1086\n0.070\n1.542\n0.123\n-0.029\n0.247\n\n\nDomain Social Sciences\n-0.2491\n0.091\n-2.748\n0.006\n-0.427\n-0.071\n\n\nCode-Contrib. Authors × Domain Life Sciences\n0.0976\n0.070\n1.401\n0.161\n-0.039\n0.234\n\n\nCode-Contrib. Authors × Domain Physical Sciences\n0.0349\n0.059\n0.587\n0.557\n-0.082\n0.151\n\n\nCode-Contrib. Authors × Domain Social Sciences\n0.1449\n0.073\n1.992\n0.046\n0.002\n0.287\n\n\nCode-Contrib. Non-Authors × Domain Life Sciences\n-0.0461\n0.036\n-1.291\n0.197\n-0.116\n0.024\n\n\nCode-Contrib. Non-Authors × Domain Physical Sciences\n-0.0217\n0.028\n-0.786\n0.432\n-0.076\n0.032\n\n\nCode-Contrib. Non-Authors × Domain Social Sciences\n-0.0344\n0.037\n-0.919\n0.358\n-0.108\n0.039\n\n\n\n\n\n\n\n\n\n\n\n\nTable 13: Article citations by code contributorship of the research team controlled by article type. Generalized linear model fit with negative binomial distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n19303\n\n\nModel:\nGLM\nDf Residuals:\n19292\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n10\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-66266.\n\n\nDate:\nFri, 17 Oct 2025\nDeviance:\n18721.\n\n\nTime:\n18:20:14\nPearson chi2:\n2.86e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.3175\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.4361\n0.046\n9.583\n0.000\n0.347\n0.525\n\n\nTotal Authors\n0.0763\n0.004\n17.740\n0.000\n0.068\n0.085\n\n\nCode-Contrib. Authors\n-0.0051\n0.029\n-0.175\n0.861\n-0.062\n0.052\n\n\nCode-Contrib. Non-Authors\n-0.0308\n0.010\n-3.143\n0.002\n-0.050\n-0.012\n\n\nYears Since Publication\n0.4078\n0.004\n93.146\n0.000\n0.399\n0.416\n\n\nArticle Type Research Article\n0.5309\n0.041\n12.958\n0.000\n0.451\n0.611\n\n\nArticle Type Software Article\n-0.4617\n0.139\n-3.311\n0.001\n-0.735\n-0.188\n\n\nCode-Contrib. Authors × Article Type Research Article\n0.0661\n0.032\n2.088\n0.037\n0.004\n0.128\n\n\nCode-Contrib. Authors × Article Type Software Article\n-0.0842\n0.070\n-1.203\n0.229\n-0.221\n0.053\n\n\nCode-Contrib. Non-Authors × Article Type Research Article\n0.0377\n0.011\n3.440\n0.001\n0.016\n0.059\n\n\nCode-Contrib. Non-Authors × Article Type Software Article\n0.0844\n0.077\n1.089\n0.276\n-0.068\n0.236"
  },
  {
    "objectID": "qss-code-authors.html#post-hoc-tests-for-coding-vs-non-coding-authors-by-position",
    "href": "qss-code-authors.html#post-hoc-tests-for-coding-vs-non-coding-authors-by-position",
    "title": "Code Contribution and Credit in Science",
    "section": "7.6 Post-Hoc Tests for Coding vs Non-Coding Authors by Position",
    "text": "7.6 Post-Hoc Tests for Coding vs Non-Coding Authors by Position\n\n\n\n\nTable 14: Counts of Code-Contributing Authors (‘Coding’) and Total Authors by Position and Bonferroni Corrected p-values from Post-Hoc Binomial Tests. Significant p-values are indicated with asterisks: p &lt; 0.05 (*), p &lt; 0.01 (**), p &lt; 0.001 (***).\n\n\n\n\n\n\nControl\nSubset\nPosition\nCoding\nTotal\np\n\n\nDomain\nHealth Sciences\nFirst\n625\n931\n0.000***\n\n\nMiddle\n200\n3508\n0.000***\n\n\nLast\n85\n922\n0.000***\n\n\nLife Sciences\nFirst\n1115\n1678\n0.000***\n\n\nMiddle\n384\n5059\n0.000***\n\n\nLast\n214\n1674\n0.000***\n\n\nPhysical Sciences\nFirst\n11318\n16092\n0.000***\n\n\nMiddle\n4458\n44329\n0.000***\n\n\nLast\n1073\n15956\n0.000***\n\n\nSocial Sciences\nFirst\n788\n1122\n0.000***\n\n\nMiddle\n358\n2776\n0.000***\n\n\nLast\n120\n1121\n0.000***\n\n\nArticle Type\nPreprint\nFirst\n1872\n2662\n0.000***\n\n\nMiddle\n791\n7335\n0.000***\n\n\nLast\n174\n2656\n0.000***\n\n\nResearch Article\nFirst\n11848\n16961\n0.000***\n\n\nMiddle\n4471\n47814\n0.000***\n\n\nLast\n1276\n16817\n0.000***\n\n\nSoftware Article\nFirst\n126\n200\n0.002**\n\n\nMiddle\n138\n523\n0.000***\n\n\nLast\n42\n200\n0.000***\n\n\nOpen Access Status\nClosed Access\nFirst\n772\n1066\n0.000***\n\n\nMiddle\n298\n3250\n0.000***\n\n\nLast\n70\n1053\n0.000***\n\n\nOpen Access\nFirst\n13074\n18757\n0.000***\n\n\nMiddle\n5102\n52422\n0.000***\n\n\nLast\n1422\n18620\n0.000***\n\n\nOverall\nOverall\nFirst\n13846\n19823\n0.000***\n\n\nMiddle\n5400\n55672\n0.000***\n\n\nLast\n1492\n19673\n0.000***\n\n\n\n\n\n\n\n\nCounts of authors in Table 14 may differ slightly from counts in Table 5. Table 5 counts unique authors, while Table 14 counts unique author-document pairs (i.e., the same author may appear in multiple documents)."
  },
  {
    "objectID": "qss-code-authors.html#post-hoc-tests-for-coding-vs-non-coding-authors-by-corresponding-status",
    "href": "qss-code-authors.html#post-hoc-tests-for-coding-vs-non-coding-authors-by-corresponding-status",
    "title": "Code Contribution and Credit in Science",
    "section": "7.7 Post-Hoc Tests for Coding vs Non-Coding Authors by Corresponding Status",
    "text": "7.7 Post-Hoc Tests for Coding vs Non-Coding Authors by Corresponding Status\n\n\n\n\nTable 15: Counts of Code-Contributing Authors (‘Coding’) and Total Authors by Corresponding Status and Bonferroni Corrected p-values from Post-Hoc Binomial Tests. Significant p-values are indicated with asterisks: p &lt; 0.05 (*), p &lt; 0.01 (**), p &lt; 0.001 (***).\n\n\n\n\n\n\nControl\nSubset\nIs Corresponding\nCoding\nTotal\np\n\n\nDomain\nHealth Sciences\nCorresponding\n411\n1974\n0.000***\n\n\nNot Corresponding\n499\n3387\n0.000***\n\n\nLife Sciences\nCorresponding\n867\n3957\n0.000***\n\n\nNot Corresponding\n846\n4454\n0.000***\n\n\nPhysical Sciences\nCorresponding\n2214\n5975\n0.000***\n\n\nNot Corresponding\n14635\n70402\n0.000***\n\n\nSocial Sciences\nCorresponding\n329\n954\n0.000***\n\n\nNot Corresponding\n937\n4065\n0.000***\n\n\nArticle Type\nPreprint\nCorresponding\n13\n41\n0.055\n\n\nNot Corresponding\n2824\n12612\n0.000***\n\n\nResearch Article\nCorresponding\n3739\n12638\n0.000***\n\n\nNot Corresponding\n13856\n68954\n0.000***\n\n\nSoftware Article\nCorresponding\n69\n181\n0.003**\n\n\nNot Corresponding\n237\n742\n0.000***\n\n\nOpen Access Status\nClosed Access\nCorresponding\n82\n181\n0.468\n\n\nNot Corresponding\n1058\n5188\n0.000***\n\n\nOpen Access\nCorresponding\n3739\n12679\n0.000***\n\n\nNot Corresponding\n15859\n77120\n0.000***\n\n\nOverall\nOverall\nCorresponding\n3821\n12860\n0.000***\n\n\nNot Corresponding\n16917\n82308\n0.000***\n\n\n\n\n\n\n\n\nCounts of authors in Table 15 may differ slightly from counts in Table 5. Table 5 counts unique authors, while Table 15 counts unique author-document pairs (i.e., the same author may appear in multiple documents)."
  },
  {
    "objectID": "qss-code-authors.html#filtered-dataset-description-for-h-index-analysis",
    "href": "qss-code-authors.html#filtered-dataset-description-for-h-index-analysis",
    "title": "Code Contribution and Credit in Science",
    "section": "7.8 Filtered Dataset Description for h-Index Analysis",
    "text": "7.8 Filtered Dataset Description for h-Index Analysis\n\n\n\n\nTable 16: Counts of Total Authors, n Any Coding Authors, n Majority Coding Authors, and n Always Coding Authors by Common Domain, Document Type, and Author Position. Authors are only included if they have three or more publications within our dataset and are associated with no more than three developer accounts, with each association having a predicted model confidence of at least 97%.\n\n\n\n\n\n\nCategory\nSubset\nTotal Authors\nAny Code\nMajority Code\nAlways Code\n\n\nBy Commmon Domain\nHealth Sciences\n1507\n339\n196\n82\n\n\nLife Sciences\n1440\n351\n236\n129\n\n\nPhysical Sciences\n49430\n14753\n7951\n3720\n\n\nSocial Sciences\n1304\n276\n219\n178\n\n\nBy Document Type\nPreprint\n29038\n9255\n4828\n2151\n\n\nResearch Article\n24265\n6419\n3657\n1830\n\n\nSoftware Article\n378\n45\n117\n128\n\n\nBy Author Position\nFirst\n11459\n1671\n4864\n3249\n\n\nLast\n10208\n2260\n550\n186\n\n\nMiddle\n32014\n11788\n3188\n674\n\n\nTotal\n\n53681\n15719\n8602\n4109"
  },
  {
    "objectID": "qss-code-authors.html#h-index-linear-model-results",
    "href": "qss-code-authors.html#h-index-linear-model-results",
    "title": "Code Contribution and Credit in Science",
    "section": "7.9 h-Index Linear Model Results",
    "text": "7.9 h-Index Linear Model Results\n\n\n\n\nTable 17: Code-contributing authors h-index by coding status. Generalized linear model fit with Gaussian distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49483\n\n\nModel:\nGLM\nDf Residuals:\n49478\n\n\nModel Family:\nGaussian\nDf Model:\n4\n\n\nLink Function:\nLog\nScale:\n198.76\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-2.0115e+05\n\n\nDate:\nFri, 17 Oct 2025\nDeviance:\n9.8342e+06\n\n\nTime:\n18:20:17\nPearson chi2:\n9.83e+06\n\n\nNo. Iterations:\n46\nPseudo R-squ. (CS):\n0.1757\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.1825\n0.004\n838.738\n0.000\n3.175\n3.190\n\n\nWorks Count\n0.0001\n1.98e-06\n66.904\n0.000\n0.000\n0.000\n\n\nAny Coding\n-0.3213\n0.008\n-42.806\n0.000\n-0.336\n-0.307\n\n\nMajority Coding\n-0.7591\n0.014\n-53.908\n0.000\n-0.787\n-0.732\n\n\nAlways Coding\n-0.9583\n0.025\n-38.142\n0.000\n-1.008\n-0.909\n\n\n\n\n\n\n\n\n\n\n\n\nTable 18: Code-contributing authors h-index by coding status controlled by most freq. author position. Generalized linear model fit with Gaussian distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49483\n\n\nModel:\nGLM\nDf Residuals:\n49470\n\n\nModel Family:\nGaussian\nDf Model:\n12\n\n\nLink Function:\nLog\nScale:\n180.37\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-1.9874e+05\n\n\nDate:\nFri, 17 Oct 2025\nDeviance:\n8.9231e+06\n\n\nTime:\n18:20:17\nPearson chi2:\n8.92e+06\n\n\nNo. Iterations:\n44\nPseudo R-squ. (CS):\n0.2702\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n2.3605\n0.032\n73.290\n0.000\n2.297\n2.424\n\n\nWorks Count\n0.0001\n1.96e-06\n67.646\n0.000\n0.000\n0.000\n\n\nAny Coding\n0.1571\n0.042\n3.745\n0.000\n0.075\n0.239\n\n\nMajority Coding\n-0.0490\n0.038\n-1.301\n0.193\n-0.123\n0.025\n\n\nAlways Coding\n-0.2248\n0.043\n-5.176\n0.000\n-0.310\n-0.140\n\n\nCommon Author Position Last\n1.0623\n0.033\n32.552\n0.000\n0.998\n1.126\n\n\nCommon Author Position Middle\n0.7533\n0.033\n23.135\n0.000\n0.690\n0.817\n\n\nAny Coding × Common Author Position Last\n-0.3112\n0.044\n-7.129\n0.000\n-0.397\n-0.226\n\n\nAny Coding × Common Author Position Middle\n-0.4674\n0.043\n-10.893\n0.000\n-0.551\n-0.383\n\n\nMajority Coding × Common Author Position Last\n-0.3726\n0.047\n-7.861\n0.000\n-0.465\n-0.280\n\n\nMajority Coding × Common Author Position Middle\n-0.6241\n0.043\n-14.485\n0.000\n-0.709\n-0.540\n\n\nAlways Coding × Common Author Position Last\n-0.3783\n0.074\n-5.126\n0.000\n-0.523\n-0.234\n\n\nAlways Coding × Common Author Position Middle\n-0.5100\n0.066\n-7.678\n0.000\n-0.640\n-0.380\n\n\n\n\n\n\n\n\n\n\n\n\nTable 19: Code-contributing authors h-index by coding status controlled by most freq. domain. Generalized linear model fit with Gaussian distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49483\n\n\nModel:\nGLM\nDf Residuals:\n49466\n\n\nModel Family:\nGaussian\nDf Model:\n16\n\n\nLink Function:\nLog\nScale:\n197.48\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-2.0098e+05\n\n\nDate:\nFri, 17 Oct 2025\nDeviance:\n9.7684e+06\n\n\nTime:\n18:20:17\nPearson chi2:\n9.77e+06\n\n\nNo. Iterations:\n48\nPseudo R-squ. (CS):\n0.1823\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.3098\n0.018\n186.605\n0.000\n3.275\n3.345\n\n\nWorks Count\n0.0001\n2.06e-06\n66.916\n0.000\n0.000\n0.000\n\n\nAny Coding\n-0.3737\n0.044\n-8.398\n0.000\n-0.461\n-0.286\n\n\nMajority Coding\n-1.4599\n0.104\n-14.068\n0.000\n-1.663\n-1.256\n\n\nAlways Coding\n-1.1856\n0.187\n-6.357\n0.000\n-1.551\n-0.820\n\n\nCommon Domain Life Sciences\n0.1075\n0.025\n4.247\n0.000\n0.058\n0.157\n\n\nCommon Domain Physical Sciences\n-0.1400\n0.018\n-7.701\n0.000\n-0.176\n-0.104\n\n\nCommon Domain Social Sciences\n-0.1638\n0.030\n-5.395\n0.000\n-0.223\n-0.104\n\n\nAny Coding × Common Domain Life Sciences\n0.0747\n0.058\n1.279\n0.201\n-0.040\n0.189\n\n\nAny Coding × Common Domain Physical Sciences\n0.0538\n0.045\n1.191\n0.234\n-0.035\n0.142\n\n\nAny Coding × Common Domain Social Sciences\n0.0117\n0.073\n0.161\n0.872\n-0.131\n0.155\n\n\nMajority Coding × Common Domain Life Sciences\n0.8336\n0.119\n6.982\n0.000\n0.600\n1.068\n\n\nMajority Coding × Common Domain Physical Sciences\n0.7193\n0.105\n6.865\n0.000\n0.514\n0.925\n\n\nMajority Coding × Common Domain Social Sciences\n0.7679\n0.135\n5.703\n0.000\n0.504\n1.032\n\n\nAlways Coding × Common Domain Life Sciences\n0.2730\n0.213\n1.281\n0.200\n-0.145\n0.691\n\n\nAlways Coding × Common Domain Physical Sciences\n0.2279\n0.188\n1.210\n0.226\n-0.141\n0.597\n\n\nAlways Coding × Common Domain Social Sciences\n0.3030\n0.219\n1.381\n0.167\n-0.127\n0.733\n\n\n\n\n\n\n\n\n\n\n\n\nTable 20: Code-contributing authors h-index by coding status controlled by most freq. article type. Generalized linear model fit with Gaussian distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49483\n\n\nModel:\nGLM\nDf Residuals:\n49470\n\n\nModel Family:\nGaussian\nDf Model:\n12\n\n\nLink Function:\nLog\nScale:\n195.37\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-2.0072e+05\n\n\nDate:\nFri, 17 Oct 2025\nDeviance:\n9.6651e+06\n\n\nTime:\n18:20:17\nPearson chi2:\n9.67e+06\n\n\nNo. Iterations:\n47\nPseudo R-squ. (CS):\n0.1927\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.0879\n0.006\n532.656\n0.000\n3.077\n3.099\n\n\nWorks Count\n0.0001\n1.99e-06\n64.759\n0.000\n0.000\n0.000\n\n\nAny Coding\n-0.2938\n0.011\n-27.311\n0.000\n-0.315\n-0.273\n\n\nMajority Coding\n-0.7606\n0.021\n-36.189\n0.000\n-0.802\n-0.719\n\n\nAlways Coding\n-0.9799\n0.040\n-24.644\n0.000\n-1.058\n-0.902\n\n\nCommon Article Type Research Article\n0.1836\n0.008\n24.214\n0.000\n0.169\n0.198\n\n\nCommon Article Type Software Article\n0.2231\n0.055\n4.034\n0.000\n0.115\n0.331\n\n\nAny Coding × Common Article Type Research Article\n-0.0296\n0.015\n-1.984\n0.047\n-0.059\n-0.000\n\n\nAny Coding × Common Article Type Software Article\n0.1663\n0.103\n1.622\n0.105\n-0.035\n0.367\n\n\nMajority Coding × Common Article Type Research Article\n0.0071\n0.028\n0.251\n0.802\n-0.048\n0.063\n\n\nMajority Coding × Common Article Type Software Article\n0.3797\n0.090\n4.220\n0.000\n0.203\n0.556\n\n\nAlways Coding × Common Article Type Research Article\n0.0018\n0.052\n0.034\n0.973\n-0.101\n0.104\n\n\nAlways Coding × Common Article Type Software Article\n0.3679\n0.108\n3.417\n0.001\n0.157\n0.579"
  },
  {
    "objectID": "qss-code-authors.html#study-differences-from-preregistration",
    "href": "qss-code-authors.html#study-differences-from-preregistration",
    "title": "Code Contribution and Credit in Science",
    "section": "7.10 Study Differences from Preregistration",
    "text": "7.10 Study Differences from Preregistration\n\n7.10.1 Analysis of Article Field Weighted Citation Impact (FWCI) and Code Contribution\nIn our pre-registered analysis plan (https://osf.io/fc74m), we initially stated that we would additionally investigate the relationship between an article’s Field Weighted Citation Impact (FWCI) and the number of code contributors to the project. We decided against this analysis as the FWCI metric was only available from OpenAlex for 55.5% (n=76904) articles from the rs-graph-v1 dataset at the time of data processing. In addition, our analysis of the relationship between article citations and the number of code contributors to the project already includes the articles domain and duration since publication providing similar control.\n\n\n7.10.2 Analysis of Project Duration and Percentage Code-Contributors Who Are Authors\nIn our pre-registered analysis plan (https://osf.io/fc74m), we initially hypothesized that there would be a positive relationship between project duration and authorship recognition. Specifically, we posited that sustained technical engagement and scientific recognition might be meaningfully related, with longer project durations potentially leading to higher rates of code-contributor authorship. We saw repository histories as providing a unique opportunity to examine this relationship, leading us to hypothesize that projects with longer commit durations would be associated with higher percentages of developers receiving authorship recognition (pre-registered as H2).\nHowever, our analysis found no evidence to support this hypothesis. When examining the relationship between a repository’s commit duration and the percentage of developers who receive authorship recognition, we found no significant correlation (r = -0.00, p = n.s.). This suggests that the length of time a project has been in development has no meaningful relationship with the proportion of developers who are recognized as authors.\nWe ultimately decided to exclude this analysis for two key methodological reasons. First, our approach of using repository-level commit duration as a proxy for individual contribution patterns proved too coarse-grained. A more precise analysis would need to examine individual-level contribution durations and patterns rather than overall project length. Second, our method did not account for the varying levels of contribution that different developers make to a repository. Simply correlating overall project duration with authorship rates fails to capture the nuanced ways that sustained, meaningful technical contributions might influence authorship decisions.\nThese limitations suggest potential directions for future work that could more rigorously examine the relationship between long-term technical engagement and scientific recognition. Such work could benefit from a more granular analysis of individual contribution patterns, incorporating measures of contribution significance and sustainability rather than just temporal duration."
  }
]