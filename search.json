[
  {
    "objectID": "qss-code-authors.html",
    "href": "qss-code-authors.html",
    "title": "Code Contribution and Scientific Authorship",
    "section": "",
    "text": "Software has become integral to contemporary scientific research (Edwards et al. 2013; Mayernik et al. 2017). From scripts for analysis and visualization to infrastructure for data collection (Hasselbring et al. 2024), software and code are now essential components of modern research practice. Today, research software serves multiple critical functions: enabling reproducible experiments (Krafczyk et al. 2019; Trisovic et al. 2021), providing methodological documentation (Ram 2013), and increasingly appearing alongside publications as an additional research artifact (Cao et al. 2023; Trujillo, Hébert-Dufresne, and Bagrow 2022). Software’s expanding role has changed how science is conducted, with many fields now depending on specialized tools to advance scientific knowledge production.\nDespite the growing dependence on software, a significant recognition gap exists between software development and traditional scientific outputs. Software contributors frequently find their work relegated to acknowledgments sections rather than warranting authorship (Philippe et al. 2019), creating a disconnect between the value software provides and the credit its developers receive. This misalignment has consequences for scientific careers, as the lack of formal credit can significantly impact promotion and advancement within research organizations (Carver et al. 2022; Biagioli and Galison 2014). The result is a system that increasingly relies on software while undervaluing those who create it, potentially discouraging talented developers from pursuing scientific careers and affecting the sustainability of research software development (Muna et al. 2016).\nThe scientific community has attempted to address this recognition gap through initiatives like the Contributor Roles Taxonomy (CRediT). CRediT supports more inclusive authorship criteria for specialized contribution roles, including software development (Brand et al. 2015; Li, Zhang, and Larivière 2023; Lu et al. 2019). Despite these efforts, current frameworks remain centered on traditional author lists and may perpetuate historical biases about what consitutes meaningful scientific contribution (Haeussler and Sauermann 2013; Gøtzsche et al. 2007; Ni et al. 2021). Simultaneously, researchers have also advocated for software citation systems that better reflect the unique contributions of research software developers, though these systems often remain separate from formal authorship recognition (Merow et al. 2023; Westner et al. 2024; Katz et al. 2020).\nThe emergence of public code repositories alongside published research provides a unique opportunity to study this disconnect. Source code repositories maintain detailed records of who contributes what code and when, providing a window into the patterns of software development in scientific research. Using transaction histories from these repositories, we developed a predictive model that enables systematic matching between scientific article authors and source code developer accounts. Our predictive model enables us to create a dataset of almost 140,000 linked authors and their developer accounts to understand how code contribution is distributed across research teams and the implications of frequent code contribution on an individuals career.\nWe identify several patterns in the relationship between code contributions and scientific recognition by applying our predictive model across almost 140,000 paired research articles and repositories. Our analysis reveals that nearly 30% of articles have non-author code-contributors - individuals who helped create the software but received no formal authorship credit. We find that code-contributing authors are associated with modest increases in article-level impact metrics (~5.1% increase in citations per code-contributing author). However, these effects become statistically non-significant when controlling for domain, article type, and open access status. First authors are significantly more likely to be code contributors than other author positions across all conditions tested. We also document a negative relationship between coding frequency and scholarly impact: authors who contribute code more frequently show progressively lower h-indices than their non-coding peers, a pattern that persists when controlling for publication count, and author’s most common author position, domain, and article type.\nThe primary contributions of this article are: (1) a predictive model for matching authors with developer account information that addresses challenges in identity resolution across platforms1; (2) a dataset of linked authors and developers for ~140,000 article-repository pairs, providing a resource for analyzing scientific software development patterns2; and (3) analyses that reveal insights into the software development dynamics of research teams, including patterns of recognition, impact, and career implications for code contributors. These contributions provide evidence for the ongoing discussions about scientific recognition systems and raise questions about aligning institutional incentives with the spectrum of contributions that drive modern scientific progress.\n1 Our predictive model is made available via Huggingface at https://huggingface.co/evamxb/dev-author-em-clf or via our Python package, sci-soft-models (https://github.com/evamaxfield/sci-soft-models/).2 Our dataset is made available via Harvard Dataverse at https://doi.org/10.7910/DVN/KPYVI1. Portions of the dataset are restricted to keep researcher and developer information private. The full dataset is available upon request via the Harvard Dataverse. For details on interacting with this dataset, see our documentation at https://github.com/evamaxfield/rs-graph.The remainder of this paper proceeds as follows. First, we review related work regarding scientific software development and the recognition of code contributors in scientific credit systems. In addition, we introduce the specific hypotheses that guide our investigation. Next, we detail our data and methods, describing how we created a dataset of linked article-repository pairs, trained and evaluated our predictive model for entity matching, and applied our model across each article-repository pair. We then present our data analysis, focusing on article-level dynamics before moving to individual-level patterns, formally accepting or rejecting each hypothesis based on our findings. We conclude by discussing the results, limitations of our work, and areas for future improvement."
  },
  {
    "objectID": "qss-code-authors.html#research-team-composition-and-scientific-impact",
    "href": "qss-code-authors.html#research-team-composition-and-scientific-impact",
    "title": "Code Contribution and Scientific Authorship",
    "section": "2.1 Research Team Composition and Scientific Impact",
    "text": "2.1 Research Team Composition and Scientific Impact\nExcept for foundational methodological shifts, scientific recognition systems have favored experimental and theoretical contributions more than their methodological counterparts, with experimental and theoretical articles receiving higher citation rates (Aksnes 2006; Liu, Zhang, and Li 2023; Chen et al. 2024). However, computational methods have transformed researchers’ work across all scientific disciplines. Modern scientific endeavors increasingly depend on sophisticated computational approaches, whether for processing large-scale experimental data, running complex simulations, or developing new methodological tools (Jin et al. 2015; Hampton et al. 2013; Edwards et al. 2013; Mayernik et al. 2017; Hasselbring et al. 2024).\nThe computational evolution in scientific practice intersects with established findings about team dynamics in both research and software development. Prior research has shown that larger and more diverse teams typically produce higher-impact scientific work (Franceschet and Costantini 2010; Larivière et al. 2014), while in software engineering, larger development teams tend to create more reliable software with fewer defects (Wyss, De Carli, and Davidson 2023). These findings suggest that team size may be particularly important in scientific software development, where technical robustness and scientific innovation are crucial.\nThe unique characteristics of scientific software development - including implementing novel algorithms, requiring deep domain knowledge, and an increased emphasis on reproducibility (Muna et al. 2016; Howison and Herbsleb 2013) - make team composition especially relevant. Larger development teams may enhance scientific impact through multiple mechanisms: they can produce more robust and generalizable software tools for methodological contributions while enabling more sophisticated computational analyses and larger-scale data processing for experimental work. Given these patterns in team dynamics, software development practices, and the computational transformation of scientific work, we propose:\nH1: The number of individuals contributing code to a publication’s associated repository positively correlates with the article’s citation count."
  },
  {
    "objectID": "qss-code-authors.html#author-roles-and-technical-contributions",
    "href": "qss-code-authors.html#author-roles-and-technical-contributions",
    "title": "Code Contribution and Scientific Authorship",
    "section": "2.2 Author Roles and Technical Contributions",
    "text": "2.2 Author Roles and Technical Contributions\nAuthor positions in scientific publications signal specific roles and responsibilities, a relationship extensively studied through contribution role taxonomies like CRediT (Larivière et al. 2016). These studies reveal that first authors and corresponding authors, while occasionally the same individual (Chinchilla-Rodrı́guez et al. 2022), take on distinct responsibilities. Analyses of contribution patterns consistently show that software development, data analysis, and visualization tasks typically fall to first authors (Larivière et al. 2016; Júnior et al. 2016; Larivière, Pontille, and Sugimoto 2020; Sauermann and Haeussler 2017). Meanwhile, corresponding authors, whether or not they are also first authors, often maintain responsibility for research artifacts’ long-term sustainability and reuse, which we believe may include the maintenance and documentation of software tools.\nContribution records from source code repositories provide a unique method to verify these established contribution patterns. Given prior findings about the distribution of technical responsibilities within research teams, we expect these repository records to reflect similar patterns of engagement with software development:\nH2a: First authors have higher code contribution rates than authors in other positions.\nH2b: Corresponding authors have higher code contribution rates than non-corresponding authors."
  },
  {
    "objectID": "qss-code-authors.html#code-contribution-and-individual-scientific-impact",
    "href": "qss-code-authors.html#code-contribution-and-individual-scientific-impact",
    "title": "Code Contribution and Scientific Authorship",
    "section": "2.3 Code Contribution and Individual Scientific Impact",
    "text": "2.3 Code Contribution and Individual Scientific Impact\nDespite the increasingly central role of software in science, researchers who develop scientific software face persistent challenges in receiving formal scientific recognition for their contributions. Prior work has shown that software developers in research settings are often relegated to acknowledgment sections rather than receiving authorship credit, even when their technical contributions are fundamental to the research (Carver et al. 2022; Philippe et al. 2019).\nThe challenge of recognition is compounded by inconsistent practices in software citation. While researchers have tried to standardize software citation, actual citation practices remain highly variable across fields and journals (Lamprecht et al. 2020; Katz et al. 2020; Smith, Katz, and Niemeyer 2016). This variability challenges researchers who maintain and update existing software packages. While creating entirely new software may lead to dedicated publications and citations, the ongoing work of maintaining, debugging, and extending existing software - often crucial for scientific progress - typically generates less visible scientific credit (Howison and Herbsleb 2011, 2013).\nThese structural challenges in recognizing and citing software contributions suggest a potential misalignment between technical contributions and traditional scientific impact metrics. When researchers dedicate significant time to software development and maintenance, conventional bibliometric measures may not fully capture their contributions, regardless of the software’s importance to the field. Whether through attribution practices that favor acknowledgments over authorship or citation patterns that undervalue maintenance work, multiple mechanisms could lead to lower traditional impact metrics for active code contributors. Based on these patterns in software recognition and citation, we hypothesize:\nH3: The frequency with which individual researchers contribute code to their research projects is negatively correlated with their h-index."
  },
  {
    "objectID": "qss-code-authors.html#software-development-dynamics-within-research-teams",
    "href": "qss-code-authors.html#software-development-dynamics-within-research-teams",
    "title": "Code Contribution and Scientific Authorship",
    "section": "4.1 Software Development Dynamics Within Research Teams",
    "text": "4.1 Software Development Dynamics Within Research Teams\nUnderstanding the composition and dynamics of software development teams provides essential context for analyzing how code contributions relate to scientific recognition and impact. To ensure reliable analysis, we focus on a subset of our article-repository pairs that meet several filtering conditions. First, we require that each article-repository pair have at least one citation, which helps ensure the research has received a basic level of engagement from the scientific community. Next, we require that repository commit activity must stop prior to 90 days past the date of article publication. Disallowing long-term projects ensures we do not include projects that may add additional code contributors later while still allowing a grace period during which developers can update repositories with additional documentation and publication information. We then subset the data to only include article-repository pairs with research teams of typical size by removing those with fewer than three authors and more than 12 authors, the 97th percentile for research team size. Finally, we filter out any author-developer pairs associated with these projects with predictive model confidence of less than 0.97 to ensure that we only include high-confidence matches3. This filtering process results in a dataset of 22804 article-repository pairs. A table with the counts of article-repository pairs, authors, and developers by data sources, domains, document types, and access status for this filtered dataset is shown in Table 5.\n3 Figure 3 shows the distribution of predictive model confidence scores for author-developer pairs to justify this threshold. We chose the 0.97 threshold to ensure that we only include high-confidence matches while retaining a large proportion of the data (~90,000 author-developer pairs) as less than 3000 author-developer-account pairs have a confidence less than 0.97 in the whole unfiltered dataset.Within this filtered dataset, we categorized individuals into three groups: code-contributing authors (CC-A) who both authored papers and contributed code to associated repositories, non-code-contributing authors (NCC-A) who authored papers but showed no evidence of code contributions, and code-contributing non-authors (CC-NA) who contributed code but received no authorship recognition. This categorization revealed that papers in our dataset typically have 4.9 ± 1.9 total authors, with 1.0 ± 0.7 code-contributing authors and 3.9 ± 2.0 non-code-contributing authors. Beyond the author list, papers averaged 0.4 ± 1.7 code-contributing non-authors. Table 2 details these distributions by domain, article type, and open access status.\nPerhaps most striking is our finding that 6529 papers (28.6%) have at least one code contributor who did not receive authorship recognition. Within this substantial subset of papers, we found an average of 1.6 ± 2.8 unrecognized code contributors per paper. On average, only one code-contributing author per paper aligns with previous research by Larivière, Pontille, and Sugimoto (2020), showing that technical tasks like data curation, formal analysis, visualization, and software development typically fall to first authors. However, our finding that over a quarter of papers have unrecognized code contributors suggests a more complex dynamic between software development and authorship recognition.\n\n\n\n\nTable 2: Mean and Standard Deviation of Non-Code-Contributing Authors (NCC-A), Code-Contributing Authors (CC-A), and Code-Contributing Non-Authors (CC-NA) Research Team Members by Domain, Article Type, and Open Access Status. Only includes research teams from article-repository pairs with a most recent commit no later than 90 days after publication and excludes research teams in the top 3% of total author sizes.\n\n\n\n\n\n\nControl\nSubset\nTotal Authors\nNCC-A\nCC-A\nCC-NA\n\n\nOA Status\nClosed\n5.1 ± 1.9\n4.1 ± 1.9\n1.0 ± 0.7\n0.5 ± 2.0\n\n\nOpen\n4.9 ± 1.9\n3.9 ± 2.0\n1.0 ± 0.7\n0.4 ± 1.6\n\n\nDomain\nHealth Sciences\n6.1 ± 2.5\n5.1 ± 2.6\n0.9 ± 0.6\n0.4 ± 1.2\n\n\nLife Sciences\n5.2 ± 2.1\n4.2 ± 2.2\n1.0 ± 0.7\n0.4 ± 1.2\n\n\nPhysical Sciences\n4.8 ± 1.8\n3.8 ± 1.9\n1.0 ± 0.7\n0.5 ± 1.8\n\n\nSocial Sciences\n4.5 ± 1.7\n3.5 ± 1.8\n1.1 ± 0.7\n0.3 ± 1.1\n\n\nArticle Type\npreprint\n4.8 ± 1.8\n3.8 ± 1.9\n1.0 ± 0.7\n0.6 ± 2.1\n\n\nresearch article\n4.9 ± 1.9\n3.9 ± 2.0\n1.0 ± 0.7\n0.4 ± 1.6\n\n\nsoftware article\n4.7 ± 1.9\n3.2 ± 1.9\n1.5 ± 1.4\n0.9 ± 1.1\n\n\nOverall\n\n4.9 ± 1.9\n3.9 ± 2.0\n1.0 ± 0.7\n0.4 ± 1.7\n\n\n\n\n\n\n\n\nWhen examining these patterns over time and across different team sizes (Figure 1), we found that the number of code-contributing authors and unrecognized contributors has remained relatively stable. This stability over time suggests that while the exclusion of code contributors from authorship is not worsening, it represents a persistent feature of scientific software development rather than a historical artifact or transition period in research practices. Similarly, the number of code-contributing non-authors remains constant even as team size grows, indicating that larger research teams do not necessarily adopt more inclusive authorship practices for code contributors, despite representing broader collaborative efforts.\n\n\n\n\n\n\n\n\nFigure 1: Average number of contributors per article, by contribution type along with A) the year the article was published, and B) the total number of authors included on the article. Only includes research teams from article-repository pairs with a most recent commit no later than 90 days after publication and excludes research teams in the top 3% of total author sizes for publication years with 50 or more articles. Shaded areas show the 95% confidence interval for the mean.\n\n\n\n\n\n\n4.1.1 Modeling Article Citations\nBuilding upon previous work examining the effects of team size and team diversity on scientific impact and software quality (see Section 2), we investigate how the number of code contributors within a research team may be associated with an article’s research impact. We hypothesized that more code contributors might signal greater technical complexity in research, which may be associated with higher citation counts as the community builds upon more technically sophisticated works.\nUsing our filtered dataset of article-repository pairs (Table 5), we conducted multiple regression analyses to examine these relationships while controlling for various factors. Without controlling for domain, open access, or article type differences (Table 6), our analysis revealed a modest positive association between the number of code contributing authors and article citations, with each code-contributing author associated with a 5.1% increase in article citations (p &lt; 0.001).\nWhen controlling for article type (Table 9), we observed divergent patterns between preprints and research articles. For preprints, each code-contributing non-author was associated with a statistically significant 3.2% decrease in citations (p &lt; 0.005). In contrast, research articles showed more positive associations: we found a significant positive relationship between code-contributing authors and citations (p &lt; 0.001), though we cannot estimate the precise magnitude due to the non-significant main effect in the model. Additionally, each code-contributing non-author was associated with a 0.1% increase in expected citations for research articles (p &lt; 0.001).\nBased on these findings, we partially accept our hypothesis (H1) that “the number of individuals contributing code to a publication’s associated repository positively correlates with the article’s citation count.” Several important nuances qualify this acceptance: the relationship is statistically significant but modest in magnitude and differs substantially between research articles (positive association) and preprints (negative association for non-author code contributors). These variations suggest that the relationship between code contributions and citation impact is context-dependent and more complex than initially hypothesized."
  },
  {
    "objectID": "qss-code-authors.html#characteristics-of-scientific-code-contributors",
    "href": "qss-code-authors.html#characteristics-of-scientific-code-contributors",
    "title": "Code Contribution and Scientific Authorship",
    "section": "4.2 Characteristics of Scientific Code Contributors",
    "text": "4.2 Characteristics of Scientific Code Contributors\n\n4.2.1 Author Positions of Code Contributing Authors\nBuilding upon previous work examining the relationship between authorship position and research contributions, we investigate how author position may relate to code contribution patterns. We hypothesized that first authors, traditionally contributing the bulk of intellectual and experimental work, are most likely to contribute code to a project. In contrast, middle and last authors often provide oversight and guidance and would be less likely to contribute code.\nTo analyze these patterns within our previously filtered dataset of article-repository pairs (Table 5), we conducted Chi-square tests of independence between author position and code contribution status. These tests revealed significant associations between author position and likelihood of code contribution overall and when controlling for research domain, article type, and open access status (all p &lt; 0.01), indicating that the proportion of authors contributing code differs significantly based on author position. Following these significant associations, we examined the specific proportions across positions (Table 10): 68.6% of first authors contributed code to their projects, compared to only 9.3% of middle authors and 7.6% of last authors. The differences in these proportions remained statistically significant across all tested scenarios, regardless of research domain, article type, or open access status.\nBased on these findings, we accept our hypothesis (H2a) that “first authors have higher code contribution rates than authors in other positions.” The data demonstrates that the proportion of first authors who contribute code (68.6%) is significantly higher than the proportion of both middle authors (9.3%) and last authors (7.6%). This relationship remains robust and statistically significant across all tested conditions, including variations in research domain, article type, and open access status, indicating a fundamental connection between authorship position and technical contribution in scientific research.\n\n\n4.2.2 Corresponding Status of Code Contributing Authors\nBuilding upon our analysis of author position, we next examine how corresponding author status relates to code contribution patterns. We hypothesized that corresponding authors, who traditionally maintain research artifacts and serve as primary points of contact, would be more likely to contribute code compared to non-corresponding authors, as this role often involves responsibility for project resources and materials.\nTo analyze these relationships within our filtered dataset of article-repository pairs, we conducted Chi-square tests of independence between corresponding author status and code contribution status. Our analysis revealed patterns contrary to our initial hypothesis. The proportion of code contributors was low among both groups, with only 27.2% of corresponding authors and 20.0% of non-corresponding authors contributing code to their projects. Further examination (Table 11) showed that this pattern holds across nearly all conditions, with only a single exception: corresponding authors in closed-access publications showed no significant difference in their proportion of code contributors. However, this was tested with a sample of less than 200 authors.\nBased on these findings, we reject our hypothesis (H2b) that “corresponding authors have higher code contribution rates than non-corresponding authors.” Contrary to our expectations, our analysis revealed that the proportion of code contributors among corresponding authors (27.2%) did not significantly differ from the proportion among non-corresponding authors (20.0%). This pattern of similar proportions remained consistent across most studied conditions, with a single, small sample size exception in closed-access publications.\n\n\n4.2.3 Modeling Author H-Index\nBuilding upon previous work examining career implications for researchers who prioritize software development (see Section 2), we investigated how varying levels of code contribution relate to scholarly impact through h-index metrics. To ensure a robust analysis, we applied several key data filtering steps. We only included researchers with at least three publications in our dataset, removed those with more than three developer account associations, and used each researcher’s most common domain, article type, and author position, with ties broken by the most recent occurrence. We removed h-index outliers by excluding researchers below the bottom 3rd and above the top 97th percentiles. Finally, we removed any author-developer-account pairs with a predictive model confidence of less than 0.97. Table 12 summarizes the number of researchers in each coding frequency group, categorized by author position, publication type, and research domain.\nWe categorized researchers’ coding contributions into mutually exclusive groups: non-coders (no code contributions), any coding (code contribution in less than half of article-repository pairs), majority coding (code contribution in at least half, but not all, article-repository pairs), and always coding (code contribution in every article-repository pair).\nFigure 2 shows the distribution of author h-indices across these coding frequency groups, grouped by author position, publication type, and research domain.\n\n\n\n\n\n\n\n\nFigure 2: Distribution of author h-index by coding frequency across three key publication factors. Results are grouped by each author’s most frequent: (1) position in publication bylines (first, middle, or last), (2) publication type (preprint, research article, or software article), and (3) research domain (Social Sciences, Physical Sciences, Health Sciences, or Life Sciences). Within each subplot, h-indices are divided by the author’s coding frequency: ‘none’ (no coding in any of their publications), ‘any’ (coding in at least one but fewer than half of their publications), ‘majority’ (coding in at least half but not all of their publications), and ‘always’ (coding in each of their publications). Authors are only included if they have three or more publications within our dataset and are associated with no more than three developer accounts, with each association having a predicted model confidence of at least 97%.\n\n\n\n\n\nOur analysis revealed a consistent and statistically significant negative relationship between code contribution frequency and h-index across multiple analytical controls. Our initial uncontrolled analysis (Table 13) indicates increasingly adverse h-index effects as researcher coding frequency increases. Compared to non-coding authors, researchers were associated with progressively lower h-indices: occasional code contributors showed a ~27.3% lower h-index (p &lt; 0.001), majority code contributors demonstrated a ~53.5% lower h-index (p &lt; 0.001), and always coding authors exhibited a ~62.1% lower h-index (p &lt; 0.001).\nWhen controlling for author position (Table 14), we found a general pattern of reduced h-indices with increased code contribution, with one notable exception. Occasional coding first authors were associated with a ~14.9% higher h-index (p &lt; 0.001), while always coding first authors saw a ~21.6% reduction compared to non-coding first authors (p &lt; 0.001). For middle and last authors, the pattern was more consistently negative. Middle authors who occasionally coded showed a ~26.6% lower h-index (p &lt; 0.001), and those always coding demonstrated a ~52.9% lower h-index (p &lt; 0.001). Similarly, last authors who occasionally coded experienced a ~13.1% lower h-index (p &lt; 0.001), with always coding authors showing a ~45.7% lower h-index (p &lt; 0.001).\nWhen controlling for research domain (Table 15), majority coding scientists showed significant h-index reductions across all domains. Health sciences researchers saw the most dramatic reduction at ~76.5% (p &lt; 0.001), followed by physical sciences at ~52.6% (p &lt; 0.001), social sciences at ~51.4% (p &lt; 0.001), and life sciences at ~47.1% (p &lt; 0.001).\nAnalyzing by common article type (Table 16) revealed similar patterns. For authors primarily publishing preprints, the h-index reductions were substantial: ~25.6% for occasional coding, ~53.5% for majority coding, and ~62.9% for always coding authors. Authors primarily publishing software articles showed slightly better but still significant reductions: ~33.1% for majority coding and ~33.0% for always coding authors.\nBased on these findings, we accept our hypothesis (H3) that “the frequency with which individual researchers contribute code to their research projects is negatively correlated with their h-index.” Our analysis demonstrates a clear and statistically significant negative relationship between coding frequency and scholarly impact as measured by the researcher’s h-index. This relationship was robust across multiple analytical controls, including author position, research domain, and article type. These results are particularly striking because each of our models includes publication count as an input feature, suggesting that these h-index reductions persist even when accounting for total research output."
  },
  {
    "objectID": "qss-code-authors.html#limitations",
    "href": "qss-code-authors.html#limitations",
    "title": "Code Contribution and Scientific Authorship",
    "section": "5.1 Limitations",
    "text": "5.1 Limitations\nOur data collection approach introduces several methodological constraints that should be considered when interpreting these results. By focusing exclusively on GitHub repositories, we likely miss contributions stored on alternative platforms such as GitLab, Bitbucket, or institutional repositories, potentially skewing our understanding of contribution patterns. As Trujillo, Hébert-Dufresne, and Bagrow (2022), Cao et al. (2023), and Escamilla et al. (2022) have all noted, while GitHub is the predominate host of scientific software, significant portions of research code exist on other platforms. Additionally, our reliance on public repositories means we cannot account for private repositories or code that were never publicly shared, potentially underrepresenting sensitive research areas or proprietary methods.\nOur predictive modeling approach for matching authors with developer accounts presents additional limitations. The model’s performance can be affected by shorter names where less textual information is available for matching, potentially creating biases against researchers from cultures with shorter naming conventions. Organization accounts used for project management pose particular challenges for accurate matching, and while we implemented filtering mechanisms to minimize their impact, some misclassifications may persist. Furthermore, our approach may not capture all code contributors if multiple individuals developed code. However, only one uploaded it to a repository, creating attribution artifacts that may systematically underrepresent specific contributors, particularly junior researchers or technical staff who may not have direct repository access.\nOur analytical approach required substantial data filtering to ensure reliable results, introducing potential selection biases in our sample. By focusing on article-repository pairs with commit activity no later than 90 days past the date of article publication and at least three authors and less than 12 authors, we may have systematically excluded certain types of research projects, particularly those with extended development timelines or extensive collaborations. Our categorization of coding status (non-coder, any coding, majority coding, always coding) necessarily simplifies complex contribution patterns. It does not account for code contributions’ quality, complexity, or significance. Additionally, our reliance on OpenAlex metadata introduces certain limitations to our analysis. While OpenAlex provides good overall coverage, it lags behind proprietary databases in indexing references and citations. The lag in OpenAlex data may affect our citation-based analyses and the completeness of author metadata used in our study (Alperin et al. 2024)."
  },
  {
    "objectID": "qss-code-authors.html#future-work",
    "href": "qss-code-authors.html#future-work",
    "title": "Code Contribution and Scientific Authorship",
    "section": "5.2 Future Work",
    "text": "5.2 Future Work\nFuture technical improvements may enhance our understanding of the relationship between software development and scientific recognition systems. Expanding analysis beyond GitHub to include other code hosting platforms would provide a more comprehensive understanding of scientific software development practices across domains and institutional contexts. More sophisticated entity-matching techniques could improve author-developer account identification, particularly for cases with limited information or common names. Developing more nuanced measures and classifications of code contribution type, quality, and significance beyond binary contribution identification would better capture the true impact of technical contributions to research. These methodological advances would enable more precise tracking of how code contributions translate—or fail to translate—into formal scientific recognition, providing clearer evidence for policy interventions.\nOur findings point to several directions for future research on the changing nature of scientific labor and recognition. Longitudinal studies tracking how code contribution patterns affect career trajectories would provide valuable insights into the long-term impacts of the observed h-index disparities and whether these effects vary across career stages. Comparative analyses across different scientific domains could reveal discipline-specific norms and practices around software recognition, potentially identifying models that more equitably credit technical contributions. Qualitative studies examining how research teams make authorship decisions regarding code contributors would complement our quantitative findings by illuminating the social and organizational factors influencing recognition practices. Additionally, to better understand corresponding authors’ role in maintaining research artifacts, future work could remove the 90-day post-publication commit activity filter to examine long-term sustainability actions. However, this approach would need to address the introduction of contributors unrelated to the original paper.\nDespite their growing importance, the persistent underrecognition of software contributions suggests a need for structural interventions in how we conceptualize and reward scientific work. Building upon efforts like CRediT (Brand et al. 2015), future work should investigate potential policy changes to better align institutional incentives with the diverse spectrum of contributions that drive modern scientific progress. However, as the example of CRediT demonstrates, even well-intentioned taxonomies may reproduce existing hierarchies or create new forms of inequality if they fail to address underlying power dynamics in scientific communities. The challenge is not merely technical but social: creating recognition systems that simultaneously support innovation, ensure appropriate credit, maintain research integrity, and foster equitable participation in an increasingly computational scientific enterprise."
  },
  {
    "objectID": "qss-code-authors.html#extended-data-and-methods",
    "href": "qss-code-authors.html#extended-data-and-methods",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.1 Extended Data and Methods",
    "text": "7.1 Extended Data and Methods\n\n7.1.1 Building a Dataset of Linked Scientific Articles and Code Repositories\nThe increasing emphasis on research transparency has led many journals and platforms to require or recommend code and data sharing (Stodden, Guo, and Ma 2013; Sharma et al. 2024), creating traceable links between publications and code. These explicit links enable systematic study of both article-repository and author-developer account relationships (Hata et al. 2021; Kelley and Garijo 2021; Stankovski and Garijo 2024; Milewicz, Pinto, and Rodeghero 2019).\nOur dataset collection process leveraged four sources of linked scientific articles and code repositories, each with specific mechanisms for establishing these connections:\n\nPublic Library of Science (PLOS): We extracted repository links from PLOS articles’ mandatory data and code availability statements.\nJournal of Open Source Software (JOSS): JOSS requires explicit code repository submission and review as a core part of its publication process.\nSoftwareX: Similar to JOSS, SoftwareX mandates code repositories as a publication requirement.\nPapers with Code: This platform directly connects machine learning preprints with their implementations. We focus solely on the “official” article-repository relationships rather than the “unverified” or “unofficial” links.\n\nTo create a comprehensive and analyzable dataset, we enriched these article-repository pairs with metadata from multiple sources. We utilized the Semantic Scholar API for DOI resolution to ensure we found the latest version of each article. This resolution step was particularly important when working with preprints, as journals may have published these papers since their inclusion in the Papers with Code dataset. Using Semantic Scholar, we successfully resolved 56.3% of all DOIs within our dataset4.\n4 Broken out by dataset source, we resolved 2.1% of all PLOS DOIs, 4.0% of all JOSS DOIs, 0.0% of all SoftwareX DOIs, and 49.2% of all Papers with Code (arXiv) DOIs.We then utilized the OpenAlex API to gather detailed publication metadata, including:\n\nPublication characteristics (open access status, domain, publication date)\nAuthor details (name, author position, corresponding author status)\nArticle- and individual-level metrics (citation counts, FWCI, h-index)\n\nSimilarly, the GitHub API provided comprehensive information for source code repositories:\n\nRepository metadata (name, description, programming languages, creation date)\nContributor details (username, display name, email)\nRepository-level metrics (star count, fork count, issue count)\n\n\n\n7.1.2 Developing a Predictive Model for Author-Developer Account Matching\n\n7.1.2.1 Annotated Dataset Creation\nCreating an accurate author-developer account matching model required quality-labeled training data that reflects real-world identity matching challenges. Exact-matching on names or emails proved insufficient due to variations in formatting (e.g., “J. Doe” vs. “Jane Doe”), use of institutional versus personal email addresses, and incomplete information. However, author and developer account information often contains sufficient similarities for probabilistic matching, such as when author “Jane Doe” corresponds to username “jdoe” or “janedoe123”.\nTo efficiently build our training and evaluation dataset, we used JOSS articles as we believed they typically feature higher author-developer-account overlap, increasing positive match density. Our dataset creation process followed these steps:\n\nWe generated semantic embeddings for each developer account and author name using the multi-qa-MiniLM-L6-cos-v1 model from the Sentence Transformers Python library (Reimers and Gurevych 2019).\nWe calculated cosine similarity between all potential author-developer-account pairs for each article-repository pair.\nFor annotation efficiency, we selected the three most similar authors for each developer account.\n\nFrom these generated author-developer-account pairs, we randomly selected 3,000 for classification by two independent annotators as either matches or non-matches, resolving disagreements through discussion and verification. The resulting dataset contains 451 (15.0%) positive matches and 2548 (85.0%) negative matches, comprising 2027 unique authors and 2733 unique developer accounts.\nOur collected data for annotation confirmed that exact matching would be insufficient—only 2191 (80.2%) of developer accounts had associated display names and just 839 (30.7%) had associated email addresses.\n\n\n7.1.2.2 Training and Evaluation\nOur training and evaluation methodology began with careful dataset preparation to prevent data leakage between training and test sets. To ensure complete separation of authors and developers, we randomly selected 10% of unique authors and 10% of unique developers, designating any pairs containing these selected entities for the test set. This entity-based splitting strategy resulted in 2442 (81.4%) pairs for training and 557 (18.6%) pairs for testing.\nFor our predictive model, we evaluated three transformer-based architectures that have demonstrated strong performance in entity matching tasks:\n\nDeBERTa-v3-base (He, Gao, and Chen 2021; He et al. 2021)\nmBERT (bert-base-multilingual-cased) (Devlin et al. 2018)\nDistilBERT (Sanh et al. 2019)\n\nWe systematically evaluated these base models across different combinations of developer-account features, ranging from using only the username to incorporating complete profile information (username, display name, and email address). We fine-tuned all models using the Adam optimizer with a linear learning rate of 1e-05 for training and a batch size of 8 for training and evaluation. Given the size of our dataset and the binary nature of our classification task, models were trained for a single epoch to prevent overfitting.\nWe evaluated model performance using standard binary classification metrics: precision, recall, and F1-score. This evaluation framework allowed us to directly compare model architectures and feature combinations while accounting for the balance between precision and recall in identifying correct matches.\nOur comprehensive model evaluation revealed that fine-tuning DeBERTa-v3-base (He, Gao, and Chen 2021) with developer username and display name as input features produces optimal performance for author-developer matching. This model configuration achieved a binary F1 score of 0.944, with an accuracy of 0.984, precision of 0.938, and recall of 0.95. Table 3 presents a complete comparison of model architectures and feature combinations.\n\n\n\n\nTable 3: Comparison of Models for Author-Developer-Account Matching\n\n\n\n\n\n\n\n\n\n\nOptional Feats.\nModel\nAccuracy\nPrecision\nRecall\nF1\n\n\n\n\n0\nname\ndeberta\n0.984\n0.938\n0.950\n0.944\n\n\n1\nname, email\nbert-multilingual\n0.984\n0.938\n0.950\n0.944\n\n\n2\nname, email\ndeberta\n0.982\n0.907\n0.975\n0.940\n\n\n3\nname\nbert-multilingual\n0.982\n0.938\n0.938\n0.938\n\n\n4\nname\ndistilbert\n0.978\n0.936\n0.912\n0.924\n\n\n5\nname, email\ndistilbert\n0.978\n0.936\n0.912\n0.924\n\n\n6\nemail\ndeberta\n0.957\n0.859\n0.838\n0.848\n\n\n7\nemail\nbert-multilingual\n0.950\n0.894\n0.738\n0.808\n\n\n8\nn/a\ndeberta\n0.946\n0.847\n0.762\n0.803\n\n\n9\nn/a\nbert-multilingual\n0.941\n0.862\n0.700\n0.772\n\n\n10\nn/a\ndistilbert\n0.856\n0.000\n0.000\n0.000\n\n\n11\nemail\ndistilbert\n0.856\n0.000\n0.000\n0.000\n\n\n\n\n\n\n\n\n\n\nAnalysis of each model’s performance revealed that including developer display names had the largest positive impact on model performance compared to username alone. We also observed that mBERT’s performance was comparable to DeBERTa’s while using the developer email address as an additional input feature. However, we selected the DeBERTa configuration as it had consistent strong performance across various feature combinations.\nTo facilitate the reuse of our work, we have made our trained model and supporting code publicly available. Complete fine-tuning, evaluation, and inference code is available as the Python package: sci-soft-models, and the fine-tuned model has been released on HuggingFace (evamxb/dev-author-em-clf).\n\n\n7.1.2.3 Model Limitations\nWhile our model demonstrates strong performance, we acknowledge certain limitations in our approach:\n\nShort name sensitivity: Shorter names (both usernames and display names) can affect the model’s performance, as less textual information is available for matching.\nOrganization accounts: Research lab accounts used for project management present a potential challenge for accurate matching, as they don’t correspond to individual authors. However, our filtering mechanisms applied before analysis help minimize their impact in modeling.\n\n\n\n\n7.1.3 Dataset Characteristics and Repository Types\nOur compiled dataset appears to contain a mix of repository types, varying from analysis script repositories to software tools and likely some “code dumps” (where code is copied to a new repository immediately before publication). This diversity is reflected in the commit duration patterns across different publication types. The median commit duration for repositories in our analysis is:\n\n47 days for preprints\n104 days for research articles\n247 days for software articles\n\nComplete statistics on commit durations, including count, mean, and quantile details, are available in Table 4.\n\n\n\n\nTable 4: Commit duration (in days) distributions for different publication types. Only includes article-repository pairs with a most recent commit no later than 90 days after publication and excludes publications from research teams in the top 3% of total author sizes.\n\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n10%\n25%\n50%\n75%\n90%\nmax\n\n\narticle_type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npreprint\n3080.0\n104.860390\n178.024291\n-1520.0\n0.0\n5.0\n47.0\n130.00\n270.0\n2091.0\n\n\nresearch article\n19502.0\n184.375551\n247.760274\n-931.0\n0.0\n13.0\n104.0\n258.75\n474.0\n3176.0\n\n\nsoftware article\n222.0\n372.509009\n470.233626\n-1.0\n0.0\n22.0\n247.0\n510.75\n904.7\n3007.0"
  },
  {
    "objectID": "qss-code-authors.html#distributions-of-author-developer-account-prediction-confidence",
    "href": "qss-code-authors.html#distributions-of-author-developer-account-prediction-confidence",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.2 Distributions of Author-Developer-Account Prediction Confidence",
    "text": "7.2 Distributions of Author-Developer-Account Prediction Confidence\n\n\n\n\n\n\n\n\nFigure 3: Distribution of author-developer-account prediction confidence scores. The left plot shows the distribution of all prediction confidence scores, while the right plot shows the distribution of prediction confidence scores for author-developer-account pairs with a confidence score greater than or equal to 0.97.\n\n\n\n\n\nThresholding the predictive model confidence at 0.97 resulted in a 3.2% (2911) reduction in the number of author-developer-account pairs (from an unfiltered total of 90086 author-developer-account pairs). This threshold was chosen to ensure a high level of confidence in the matches while retaining a large number of pairs for analysis."
  },
  {
    "objectID": "qss-code-authors.html#filtered-dataset-description-for-article-citation-author-position-and-author-correspondence-analysis",
    "href": "qss-code-authors.html#filtered-dataset-description-for-article-citation-author-position-and-author-correspondence-analysis",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.3 Filtered Dataset Description for Article-Citation, Author-Position, and Author-Correspondence Analysis",
    "text": "7.3 Filtered Dataset Description for Article-Citation, Author-Position, and Author-Correspondence Analysis\n\n\n\n\nTable 5: Counts of article-repository pairs, authors, and developers for research teams. Only includes research teams from article-repository pairs with a most recent commit no later than 90 days after publication and excludes research teams in the top 3% of total author sizes.\n\n\n\n\n\n\nCategory\nSubset\nArticle-Repository Pairs\nAuthors\nDevelopers\n\n\nBy Domain\nHealth Sciences\n1167\n6487\n1462\n\n\nLife Sciences\n1994\n9586\n2594\n\n\nPhysical Sciences\n18202\n62061\n22964\n\n\nSocial Sciences\n1441\n5972\n1913\n\n\nBy Document Type\npreprint\n3080\n13082\n4679\n\n\nresearch article\n19502\n70919\n23993\n\n\nsoftware article\n222\n1023\n495\n\n\nBy Access Status\nClosed\n1190\n5597\n1835\n\n\nOpen\n21614\n77234\n26849\n\n\nBy Data Source\njoss\n86\n416\n281\n\n\nplos\n2847\n14331\n3497\n\n\npwc\n19735\n66217\n24452\n\n\nsoftwarex\n136\n609\n215\n\n\nTotal\n\n22804\n80620\n28290"
  },
  {
    "objectID": "qss-code-authors.html#article-citation-linear-model-results",
    "href": "qss-code-authors.html#article-citation-linear-model-results",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.4 Article Citation Linear Model Results",
    "text": "7.4 Article Citation Linear Model Results\n\n\n\n\nTable 6: Article citations by code contributorship of research team. Generalized linear model fit with negative binomial distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n22127\n\n\nModel:\nGLM\nDf Residuals:\n22122\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n4\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-76532.\n\n\nDate:\nSun, 01 Jun 2025\nDeviance:\n22300.\n\n\nTime:\n02:56:44\nPearson chi2:\n3.39e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.2877\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.9845\n0.026\n38.459\n0.000\n0.934\n1.035\n\n\nTotal Authors\n0.0692\n0.004\n18.491\n0.000\n0.062\n0.077\n\n\nCode-Contrib. Authors\n0.0501\n0.010\n4.831\n0.000\n0.030\n0.070\n\n\nCode-Contrib. Non-Authors\n-0.0025\n0.004\n-0.575\n0.565\n-0.011\n0.006\n\n\nYears Since Publication\n0.3905\n0.004\n96.908\n0.000\n0.383\n0.398\n\n\n\n\n\n\n\n\n\n\n\n\nTable 7: Article citations by code contributorship of research team controlled by open access status. Generalized linear model fit with negative binomial distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n22127\n\n\nModel:\nGLM\nDf Residuals:\n22119\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n7\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-76464.\n\n\nDate:\nSun, 01 Jun 2025\nDeviance:\n22163.\n\n\nTime:\n02:56:45\nPearson chi2:\n3.36e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.2921\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.6140\n0.061\n10.089\n0.000\n0.495\n0.733\n\n\nTotal Authors\n0.0697\n0.004\n18.614\n0.000\n0.062\n0.077\n\n\nCode-Contrib. Authors\n0.0513\n0.045\n1.130\n0.259\n-0.038\n0.140\n\n\nCode-Contrib. Non-Authors\n0.0017\n0.016\n0.110\n0.912\n-0.029\n0.032\n\n\nYears Since Publication\n0.3811\n0.004\n93.064\n0.000\n0.373\n0.389\n\n\nIs Open Access\n0.4104\n0.060\n6.896\n0.000\n0.294\n0.527\n\n\nCode-Contrib. Authors × Is Open Access\n-0.0012\n0.047\n-0.025\n0.980\n-0.093\n0.090\n\n\nCode-Contrib. Non-Authors × Is Open Access\n-0.0036\n0.016\n-0.223\n0.824\n-0.035\n0.028\n\n\n\n\n\n\n\n\n\n\n\n\nTable 8: Article citations by code contributorship of research team controlled by domain. Generalized linear model fit with negative binomial distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n22127\n\n\nModel:\nGLM\nDf Residuals:\n22113\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n13\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-76441.\n\n\nDate:\nSun, 01 Jun 2025\nDeviance:\n22118.\n\n\nTime:\n02:56:45\nPearson chi2:\n3.34e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.2936\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.8852\n0.067\n13.267\n0.000\n0.754\n1.016\n\n\nTotal Authors\n0.0709\n0.004\n18.636\n0.000\n0.063\n0.078\n\n\nCode-Contrib. Authors\n0.0229\n0.052\n0.440\n0.660\n-0.079\n0.125\n\n\nCode-Contrib. Non-Authors\n0.0129\n0.027\n0.486\n0.627\n-0.039\n0.065\n\n\nYears Since Publication\n0.3969\n0.004\n97.373\n0.000\n0.389\n0.405\n\n\nDomain Life Sciences\n-0.2037\n0.075\n-2.698\n0.007\n-0.352\n-0.056\n\n\nDomain Physical Sciences\n0.1265\n0.063\n2.018\n0.044\n0.004\n0.249\n\n\nDomain Social Sciences\n-0.1886\n0.080\n-2.354\n0.019\n-0.346\n-0.032\n\n\nCode-Contrib. Authors × Domain Life Sciences\n0.0667\n0.063\n1.053\n0.292\n-0.057\n0.191\n\n\nCode-Contrib. Authors × Domain Physical Sciences\n0.0173\n0.053\n0.324\n0.746\n-0.087\n0.122\n\n\nCode-Contrib. Authors × Domain Social Sciences\n0.1115\n0.065\n1.706\n0.088\n-0.017\n0.239\n\n\nCode-Contrib. Non-Authors × Domain Life Sciences\n-0.0371\n0.035\n-1.062\n0.288\n-0.106\n0.031\n\n\nCode-Contrib. Non-Authors × Domain Physical Sciences\n-0.0163\n0.027\n-0.605\n0.545\n-0.069\n0.037\n\n\nCode-Contrib. Non-Authors × Domain Social Sciences\n-0.0367\n0.037\n-1.002\n0.316\n-0.109\n0.035\n\n\n\n\n\n\n\n\n\n\n\n\nTable 9: Article citations by code contributorship of research team controlled by article type. Generalized linear model fit with negative binomial distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ncited_by_count\nNo. Observations:\n22127\n\n\nModel:\nGLM\nDf Residuals:\n22116\n\n\nModel Family:\nNegativeBinomial\nDf Model:\n10\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-76088.\n\n\nDate:\nSun, 01 Jun 2025\nDeviance:\n21411.\n\n\nTime:\n02:56:45\nPearson chi2:\n3.25e+04\n\n\nNo. Iterations:\n13\nPseudo R-squ. (CS):\n0.3158\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n0.5108\n0.042\n12.292\n0.000\n0.429\n0.592\n\n\nTotal Authors\n0.0689\n0.004\n18.363\n0.000\n0.062\n0.076\n\n\nCode-Contrib. Authors\n-0.0191\n0.027\n-0.703\n0.482\n-0.072\n0.034\n\n\nCode-Contrib. Non-Authors\n-0.0320\n0.010\n-3.270\n0.001\n-0.051\n-0.013\n\n\nYears Since Publication\n0.4024\n0.004\n99.445\n0.000\n0.394\n0.410\n\n\nArticle Type Research Article\n0.4854\n0.038\n12.797\n0.000\n0.411\n0.560\n\n\nArticle Type Software Article\n-0.4715\n0.131\n-3.609\n0.000\n-0.728\n-0.215\n\n\nCode-Contrib. Authors × Article Type Research Article\n0.0925\n0.029\n3.138\n0.002\n0.035\n0.150\n\n\nCode-Contrib. Authors × Article Type Software Article\n-0.0676\n0.065\n-1.038\n0.299\n-0.195\n0.060\n\n\nCode-Contrib. Non-Authors × Article Type Research Article\n0.0390\n0.011\n3.573\n0.000\n0.018\n0.060\n\n\nCode-Contrib. Non-Authors × Article Type Software Article\n0.0901\n0.074\n1.215\n0.224\n-0.055\n0.235"
  },
  {
    "objectID": "qss-code-authors.html#post-hoc-tests-for-coding-vs-non-coding-authors-by-position",
    "href": "qss-code-authors.html#post-hoc-tests-for-coding-vs-non-coding-authors-by-position",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.5 Post-Hoc Tests for Coding vs Non-Coding Authors by Position",
    "text": "7.5 Post-Hoc Tests for Coding vs Non-Coding Authors by Position\n\n\n\n\nTable 10: Counts of Code-Contributing Authors (‘Coding’) as well as Total Authors by Position and Bonferroni Corrected p-values from Post-Hoc Binomial Tests. Significant p-values are indicated with asterisks: p &lt; 0.05 (*), p &lt; 0.01 (**), p &lt; 0.001 (***).\n\n\n\n\n\n\nControl\nSubset\nPosition\nCoding\nTotal\np\n\n\nDomain\nHealth Sciences\nFirst\n745\n1167\n0.000***\n\n\nMiddle\n255\n4741\n0.000***\n\n\nLast\n109\n1156\n0.000***\n\n\nLife Sciences\nFirst\n1277\n1992\n0.000***\n\n\nMiddle\n446\n6289\n0.000***\n\n\nLast\n252\n1987\n0.000***\n\n\nPhysical Sciences\nFirst\n12582\n18116\n0.000***\n\n\nMiddle\n4992\n51004\n0.000***\n\n\nLast\n1207\n17965\n0.000***\n\n\nSocial Sciences\nFirst\n971\n1438\n0.000***\n\n\nMiddle\n442\n3649\n0.000***\n\n\nLast\n139\n1437\n0.000***\n\n\nArticle Type\nPreprint\nFirst\n2118\n3053\n0.000***\n\n\nMiddle\n912\n8626\n0.000***\n\n\nLast\n194\n3050\n0.000***\n\n\nResearch Article\nFirst\n13320\n19438\n0.000***\n\n\nMiddle\n5069\n56453\n0.000***\n\n\nLast\n1467\n19273\n0.000***\n\n\nSoftware Article\nFirst\n137\n222\n0.004**\n\n\nMiddle\n154\n604\n0.000***\n\n\nLast\n46\n222\n0.000***\n\n\nOpen Access Status\nClosed Access\nFirst\n838\n1184\n0.000***\n\n\nMiddle\n333\n3647\n0.000***\n\n\nLast\n76\n1169\n0.000***\n\n\nOpen Access\nFirst\n14737\n21529\n0.000***\n\n\nMiddle\n5802\n62036\n0.000***\n\n\nLast\n1631\n21376\n0.000***\n\n\nOverall\nOverall\nFirst\n15575\n22713\n0.000***\n\n\nMiddle\n6135\n65683\n0.000***\n\n\nLast\n1707\n22545\n0.000***\n\n\n\n\n\n\n\n\nCounts of authors in Table 10 may differ slightly from counts in Table 5. Table 5 counts unique authors, while Table 10 counts unique author-document pairs (i.e., the same author may appear in multiple documents)."
  },
  {
    "objectID": "qss-code-authors.html#post-hoc-tests-for-coding-vs-non-coding-authors-by-corresponding-status",
    "href": "qss-code-authors.html#post-hoc-tests-for-coding-vs-non-coding-authors-by-corresponding-status",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.6 Post-Hoc Tests for Coding vs Non-Coding Authors by Corresponding Status",
    "text": "7.6 Post-Hoc Tests for Coding vs Non-Coding Authors by Corresponding Status\n\n\n\n\nTable 11: Counts of Code-Contributing Authors (‘Coding’) as well as Total Authors by Corresponding Status and Bonferroni Corrected p-values from Post-Hoc Binomial Tests. Significant p-values are indicated with asterisks: p &lt; 0.05 (*), p &lt; 0.01 (**), p &lt; 0.001 (***).\n\n\n\n\n\n\nControl\nSubset\nIs Corresponding\nCoding\nTotal\np\n\n\nDomain\nHealth Sciences\nCorresponding\n542\n3010\n0.000***\n\n\nNot Corresponding\n567\n4054\n0.000***\n\n\nLife Sciences\nCorresponding\n1031\n4942\n0.000***\n\n\nNot Corresponding\n944\n5326\n0.000***\n\n\nPhysical Sciences\nCorresponding\n2549\n7238\n0.000***\n\n\nNot Corresponding\n16232\n79847\n0.000***\n\n\nSocial Sciences\nCorresponding\n429\n1515\n0.000***\n\n\nNot Corresponding\n1123\n5009\n0.000***\n\n\nArticle Type\nPreprint\nCorresponding\n16\n51\n0.022*\n\n\nNot Corresponding\n3208\n14678\n0.000***\n\n\nResearch Article\nCorresponding\n4464\n16458\n0.000***\n\n\nNot Corresponding\n15392\n78706\n0.000***\n\n\nSoftware Article\nCorresponding\n71\n196\n0.000***\n\n\nNot Corresponding\n266\n852\n0.000***\n\n\nOpen Access Status\nClosed Access\nCorresponding\n86\n194\n0.263\n\n\nNot Corresponding\n1161\n5806\n0.000***\n\n\nOpen Access\nCorresponding\n4465\n16511\n0.000***\n\n\nNot Corresponding\n17705\n88430\n0.000***\n\n\nOverall\nOverall\nCorresponding\n4551\n16705\n0.000***\n\n\nNot Corresponding\n18866\n94236\n0.000***\n\n\n\n\n\n\n\n\nCounts of authors in Table 11 may differ slightly from counts in Table 5. Table 5 counts unique authors, while Table 11 counts unique author-document pairs (i.e., the same author may appear in multiple documents)."
  },
  {
    "objectID": "qss-code-authors.html#filtered-dataset-description-for-h-index-analysis",
    "href": "qss-code-authors.html#filtered-dataset-description-for-h-index-analysis",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.7 Filtered Dataset Description for h-Index Analysis",
    "text": "7.7 Filtered Dataset Description for h-Index Analysis\n\n\n\n\nTable 12: Counts of Total Authors, n Any Coding Authors, n Majority Coding Authors, and n Always Coding Authors by Common Domain, Document Type, and Author Position. Authors are only included if they have three or more publications within our dataset and are associated with no more than three developer accounts, with each association having a predicted model confidence of at least 97%.\n\n\n\n\n\n\nCategory\nSubset\nTotal Authors\nAny Code\nMajority Code\nAlways Code\n\n\nBy Commmon Domain\nHealth Sciences\n1507\n339\n196\n82\n\n\nLife Sciences\n1440\n351\n236\n129\n\n\nPhysical Sciences\n49430\n14753\n7951\n3720\n\n\nSocial Sciences\n1304\n276\n219\n178\n\n\nBy Document Type\nPreprint\n29038\n9255\n4828\n2151\n\n\nResearch Article\n24265\n6419\n3657\n1830\n\n\nSoftware Article\n378\n45\n117\n128\n\n\nBy Author Position\nFirst\n11459\n1671\n4864\n3249\n\n\nLast\n10208\n2260\n550\n186\n\n\nMiddle\n32014\n11788\n3188\n674\n\n\nTotal\n\n53681\n15719\n8602\n4109"
  },
  {
    "objectID": "qss-code-authors.html#h-index-linear-model-results",
    "href": "qss-code-authors.html#h-index-linear-model-results",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.8 h-Index Linear Model Results",
    "text": "7.8 h-Index Linear Model Results\n\n\n\n\nTable 13: Code-contributing authors h-index by coding status. Generalized linear model fit with Gaussian distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49483\n\n\nModel:\nGLM\nDf Residuals:\n49478\n\n\nModel Family:\nGaussian\nDf Model:\n4\n\n\nLink Function:\nLog\nScale:\n198.76\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-2.0115e+05\n\n\nDate:\nSun, 01 Jun 2025\nDeviance:\n9.8342e+06\n\n\nTime:\n02:56:47\nPearson chi2:\n9.83e+06\n\n\nNo. Iterations:\n46\nPseudo R-squ. (CS):\n0.1757\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.1825\n0.004\n838.738\n0.000\n3.175\n3.190\n\n\nWorks Count\n0.0001\n1.98e-06\n66.904\n0.000\n0.000\n0.000\n\n\nAny Coding\n-0.3213\n0.008\n-42.806\n0.000\n-0.336\n-0.307\n\n\nMajority Coding\n-0.7591\n0.014\n-53.908\n0.000\n-0.787\n-0.732\n\n\nAlways Coding\n-0.9583\n0.025\n-38.142\n0.000\n-1.008\n-0.909\n\n\n\n\n\n\n\n\n\n\n\n\nTable 14: Code-contributing authors h-index by coding status controlled by most freq. author position. Generalized linear model fit with Gaussian distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49483\n\n\nModel:\nGLM\nDf Residuals:\n49470\n\n\nModel Family:\nGaussian\nDf Model:\n12\n\n\nLink Function:\nLog\nScale:\n180.37\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-1.9874e+05\n\n\nDate:\nSun, 01 Jun 2025\nDeviance:\n8.9231e+06\n\n\nTime:\n02:56:47\nPearson chi2:\n8.92e+06\n\n\nNo. Iterations:\n44\nPseudo R-squ. (CS):\n0.2702\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n2.3605\n0.032\n73.290\n0.000\n2.297\n2.424\n\n\nWorks Count\n0.0001\n1.96e-06\n67.646\n0.000\n0.000\n0.000\n\n\nAny Coding\n0.1571\n0.042\n3.745\n0.000\n0.075\n0.239\n\n\nMajority Coding\n-0.0490\n0.038\n-1.301\n0.193\n-0.123\n0.025\n\n\nAlways Coding\n-0.2248\n0.043\n-5.176\n0.000\n-0.310\n-0.140\n\n\nCommon Author Position Last\n1.0623\n0.033\n32.552\n0.000\n0.998\n1.126\n\n\nCommon Author Position Middle\n0.7533\n0.033\n23.135\n0.000\n0.690\n0.817\n\n\nAny Coding × Common Author Position Last\n-0.3112\n0.044\n-7.129\n0.000\n-0.397\n-0.226\n\n\nAny Coding × Common Author Position Middle\n-0.4674\n0.043\n-10.893\n0.000\n-0.551\n-0.383\n\n\nMajority Coding × Common Author Position Last\n-0.3726\n0.047\n-7.861\n0.000\n-0.465\n-0.280\n\n\nMajority Coding × Common Author Position Middle\n-0.6241\n0.043\n-14.485\n0.000\n-0.709\n-0.540\n\n\nAlways Coding × Common Author Position Last\n-0.3783\n0.074\n-5.126\n0.000\n-0.523\n-0.234\n\n\nAlways Coding × Common Author Position Middle\n-0.5100\n0.066\n-7.678\n0.000\n-0.640\n-0.380\n\n\n\n\n\n\n\n\n\n\n\n\nTable 15: Code-contributing authors h-index by coding status controlled by most freq. domain. Generalized linear model fit with Gaussian distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49483\n\n\nModel:\nGLM\nDf Residuals:\n49466\n\n\nModel Family:\nGaussian\nDf Model:\n16\n\n\nLink Function:\nLog\nScale:\n197.48\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-2.0098e+05\n\n\nDate:\nSun, 01 Jun 2025\nDeviance:\n9.7684e+06\n\n\nTime:\n02:56:47\nPearson chi2:\n9.77e+06\n\n\nNo. Iterations:\n48\nPseudo R-squ. (CS):\n0.1823\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.3098\n0.018\n186.605\n0.000\n3.275\n3.345\n\n\nWorks Count\n0.0001\n2.06e-06\n66.916\n0.000\n0.000\n0.000\n\n\nAny Coding\n-0.3737\n0.044\n-8.398\n0.000\n-0.461\n-0.286\n\n\nMajority Coding\n-1.4599\n0.104\n-14.068\n0.000\n-1.663\n-1.256\n\n\nAlways Coding\n-1.1856\n0.187\n-6.357\n0.000\n-1.551\n-0.820\n\n\nCommon Domain Life Sciences\n0.1075\n0.025\n4.247\n0.000\n0.058\n0.157\n\n\nCommon Domain Physical Sciences\n-0.1400\n0.018\n-7.701\n0.000\n-0.176\n-0.104\n\n\nCommon Domain Social Sciences\n-0.1638\n0.030\n-5.395\n0.000\n-0.223\n-0.104\n\n\nAny Coding × Common Domain Life Sciences\n0.0747\n0.058\n1.279\n0.201\n-0.040\n0.189\n\n\nAny Coding × Common Domain Physical Sciences\n0.0538\n0.045\n1.191\n0.234\n-0.035\n0.142\n\n\nAny Coding × Common Domain Social Sciences\n0.0117\n0.073\n0.161\n0.872\n-0.131\n0.155\n\n\nMajority Coding × Common Domain Life Sciences\n0.8336\n0.119\n6.982\n0.000\n0.600\n1.068\n\n\nMajority Coding × Common Domain Physical Sciences\n0.7193\n0.105\n6.865\n0.000\n0.514\n0.925\n\n\nMajority Coding × Common Domain Social Sciences\n0.7679\n0.135\n5.703\n0.000\n0.504\n1.032\n\n\nAlways Coding × Common Domain Life Sciences\n0.2730\n0.213\n1.281\n0.200\n-0.145\n0.691\n\n\nAlways Coding × Common Domain Physical Sciences\n0.2279\n0.188\n1.210\n0.226\n-0.141\n0.597\n\n\nAlways Coding × Common Domain Social Sciences\n0.3030\n0.219\n1.381\n0.167\n-0.127\n0.733\n\n\n\n\n\n\n\n\n\n\n\n\nTable 16: Code-contributing authors h-index by coding status controlled by most freq. article type. Generalized linear model fit with Gaussian distribution and log link function.\n\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nh_index\nNo. Observations:\n49483\n\n\nModel:\nGLM\nDf Residuals:\n49470\n\n\nModel Family:\nGaussian\nDf Model:\n12\n\n\nLink Function:\nLog\nScale:\n195.37\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-2.0072e+05\n\n\nDate:\nSun, 01 Jun 2025\nDeviance:\n9.6651e+06\n\n\nTime:\n02:56:47\nPearson chi2:\n9.67e+06\n\n\nNo. Iterations:\n47\nPseudo R-squ. (CS):\n0.1927\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.0879\n0.006\n532.656\n0.000\n3.077\n3.099\n\n\nWorks Count\n0.0001\n1.99e-06\n64.759\n0.000\n0.000\n0.000\n\n\nAny Coding\n-0.2938\n0.011\n-27.311\n0.000\n-0.315\n-0.273\n\n\nMajority Coding\n-0.7606\n0.021\n-36.189\n0.000\n-0.802\n-0.719\n\n\nAlways Coding\n-0.9799\n0.040\n-24.644\n0.000\n-1.058\n-0.902\n\n\nCommon Article Type Research Article\n0.1836\n0.008\n24.214\n0.000\n0.169\n0.198\n\n\nCommon Article Type Software Article\n0.2231\n0.055\n4.034\n0.000\n0.115\n0.331\n\n\nAny Coding × Common Article Type Research Article\n-0.0296\n0.015\n-1.984\n0.047\n-0.059\n-0.000\n\n\nAny Coding × Common Article Type Software Article\n0.1663\n0.103\n1.622\n0.105\n-0.035\n0.367\n\n\nMajority Coding × Common Article Type Research Article\n0.0071\n0.028\n0.251\n0.802\n-0.048\n0.063\n\n\nMajority Coding × Common Article Type Software Article\n0.3797\n0.090\n4.220\n0.000\n0.203\n0.556\n\n\nAlways Coding × Common Article Type Research Article\n0.0018\n0.052\n0.034\n0.973\n-0.101\n0.104\n\n\nAlways Coding × Common Article Type Software Article\n0.3679\n0.108\n3.417\n0.001\n0.157\n0.579"
  },
  {
    "objectID": "qss-code-authors.html#analysis-of-project-duration-and-percentage-code-contributors-who-are-authors",
    "href": "qss-code-authors.html#analysis-of-project-duration-and-percentage-code-contributors-who-are-authors",
    "title": "Code Contribution and Scientific Authorship",
    "section": "7.9 Analysis of Project Duration and Percentage Code-Contributors Who Are Authors",
    "text": "7.9 Analysis of Project Duration and Percentage Code-Contributors Who Are Authors\nIn our pre-registered analysis plan (https://osf.io/fc74m), we originally hypothesized about the relationship between project duration and authorship recognition. Specifically, we posited that sustained technical engagement and scientific recognition might be meaningfully related, with longer project durations potentially leading to higher rates of code-contributor authorship. We saw repository histories as providing a unique opportunity to examine this relationship, leading us to hypothesize that projects with longer commit durations would be associated with higher percentages of developers receiving authorship recognition (pre-registered as H2).\nHowever, our analysis found no evidence to support this hypothesis. When examining the relationship between a repository’s commit duration and the percentage of developers who receive authorship recognition, we found no significant correlation (r = 0.00, p = n.s.). This suggests that the length of time a project has been in development has no meaningful relationship with the proportion of developers who are recognized as authors.\nWe ultimately decided to move this analysis to the appendix for two key methodological reasons. First, our approach of using repository-level commit duration as a proxy for individual contribution patterns proved too coarse-grained. A more precise analysis would need to examine individual-level contribution durations and patterns rather than overall project length. Second, our method did not account for the varying levels of contribution that different developers make to a repository. Simply correlating overall project duration with authorship rates fails to capture the nuanced ways that sustained, meaningful technical contributions might influence authorship decisions.\nThese limitations suggest potential directions for future work that could more rigorously examine the relationship between long-term technical engagement and scientific recognition. Such work might benefit from more granular analysis of individual contribution patterns, perhaps incorporating measures of contribution significance and sustainability rather than just temporal duration."
  }
]