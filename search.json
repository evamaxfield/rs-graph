[
  {
    "objectID": "viz.html",
    "href": "viz.html",
    "title": "Research Software Graph",
    "section": "",
    "text": "Imports and setup\nimport networkx as nx\nimport numpy as np\nfrom bokeh.io import output_notebook, show\nfrom bokeh.models import (\n    Circle,\n    MultiLine,\n)\nfrom bokeh.palettes import Magma256\nfrom bokeh.plotting import figure, from_networkx\nfrom bokeh.transform import linear_cmap\n\nfrom rs_graph.data import load_rs_graph_upstream_deps_dataset\n\n\n\n\nDataset pre-processing\n# Load dataset sample\ndf = load_rs_graph_upstream_deps_dataset()\n\n# Create integer ids for each node\nnode_ids = {}\nnode_id = 0\nfor upstream_dep in df.upstream_dep_name.unique():\n    node_ids[upstream_dep] = node_id\n    node_id += 1\n\nfor repo in df.repo.unique():\n    node_ids[repo] = node_id\n    node_id += 1\n\n# Add integer ids to each relationship\ndf[\"source_node_id\"] = df.repo.apply(lambda r: node_ids[r])\ndf[\"target_node_id\"] = df.upstream_dep_name.apply(lambda r: node_ids[r])\n\n# Filter out non-pip registries\ndf = df.loc[df.upstream_dep_registry == \"pip\"]\n\n\n\n\nBasic graph creation with networkx\n# Create graph\ngraph = nx.from_pandas_edgelist(df, \"source_node_id\", \"target_node_id\")\n\n# Add dep_count_of_upstream_dep to node attrs\nupstream_dep_value_counts = df.target_node_id.value_counts()\nmaximum_count = upstream_dep_value_counts.max()\n\n# Create dependent dict\nunique_upstreams = df.target_node_id.unique()\ndependents = {}\nlog_dependents = {}\nnode_names = {}\nfor node in graph.nodes():\n    if node in unique_upstreams:\n        # calculate dependents\n        upstream_deps_count = upstream_dep_value_counts[node]\n        dependents[node] = upstream_deps_count\n        log_dependents[node] = int(np.log(upstream_deps_count)) * 10 + 5\n\n        # add node name\n        node_names[node] = df.loc[df.target_node_id == node, \"upstream_dep_name\"].iloc[\n            0\n        ]\n    else:\n        # no dependents for now\n        dependents[node] = 1\n        log_dependents[node] = 5\n\n        # add node name\n        node_names[node] = df.loc[df.source_node_id == node, \"repo\"].iloc[0]\n\n# Save before any attrs\nnx.write_pajek(graph, \"package-package-without-attrs.pajek\")\n\n# Add extra attrs\nnx.set_node_attributes(\n    graph,\n    name=\"package\",\n    values=node_names,\n)\n\n# Store graph without the next attrs\nnx.write_pajek(graph, \"package-package-with-attrs.pajek\")\n\nnx.set_node_attributes(\n    graph,\n    name=\"dependents\",\n    values=dependents,\n)\nnx.set_node_attributes(\n    graph,\n    name=\"log_dependents\",\n    values=log_dependents,\n)\n\n\n\n\nPlotting with Bokeh\n# Bokeh output to notebook\noutput_notebook()\n\n# Create plot\nplot = figure(\n    tooltips=[(\"Package\", \"@package\"), (\"Dependents\", \"@dependents\")],\n    tools=\"pan,wheel_zoom,reset,hover\",\n    active_scroll=\"wheel_zoom\",\n)\n\n# Create a network graph object\nnetwork_graph = from_networkx(\n    graph, nx.spring_layout, scale=10, iterations=50, center=(0, 0)\n)\n\n# Set node size and color\nminimum_value_color = min(\n    network_graph.node_renderer.data_source.data[\"log_dependents\"]\n)\nmaximum_value_color = max(\n    network_graph.node_renderer.data_source.data[\"log_dependents\"]\n)\nnetwork_graph.node_renderer.glyph = Circle(\n    size=\"log_dependents\",\n    line_alpha=0,\n    fill_alpha=0.5,\n    fill_color=linear_cmap(\n        \"log_dependents\", Magma256[::-1], minimum_value_color, maximum_value_color\n    ),\n)\n\n# Set edge opacity and width\nnetwork_graph.edge_renderer.glyph = MultiLine(\n    line_alpha=0.3, line_width=1, line_color=\"lightgrey\"\n)\n\n# Add network graph to the plot\nplot.renderers.append(network_graph)\n\n# Render\nshow(plot)\n\n\n\n    \n        \n        Loading BokehJS ..."
  }
]